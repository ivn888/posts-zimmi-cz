<?xml version="1.0" encoding="utf-8"?>
<<<<<<< Updated upstream
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Michal Zimmermann</title><link>http://www.zimmi.cz/posts/</link><description>Pieces of knowledge from the world of GIS.</description><atom:link href="http://www.zimmi.cz/posts/feed.xml" rel="self"></atom:link><lastBuildDate>Wed, 10 Jun 2015 19:24:57 +0200</lastBuildDate><item><title>Clip Raster With Vector Using GDAL</title><link>http://www.zimmi.cz/posts/2015/clip-raster-with-vector-using-gdal/</link><description>&lt;p&gt;Recently I needed to clip several raster files with polygonal layer of municipalities. A solution to this task is pretty straightforward using &lt;a href="http://gdal.org/"&gt;GDAL&lt;/a&gt; and a bit of Bash and QGIS thrown in.&lt;/p&gt;
&lt;p&gt;The necessary steps are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Put each polygon to a separate file. This can be done easily with &lt;code&gt;Vector - Data Management Tools - Split Vector Layer&lt;/code&gt; in QGIS. The solution below assumes that each shapefile has the same basename as the raster file.&lt;/li&gt;
&lt;li&gt;These polygons are stored in the &lt;code&gt;obce&lt;/code&gt; subfolder relative to the folder with rasters.&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;output&lt;/code&gt; folder exists that is used for... output, yes.&lt;/li&gt;
&lt;li&gt;Rasters are saved with output alpha band for nodata (&lt;code&gt;-dstalpha&lt;/code&gt; flag).&lt;/li&gt;
&lt;li&gt;The script takes one argument - raster name.&lt;/li&gt;
&lt;li&gt;Profit!&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nv"&gt;OBEC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$OBEC&lt;/span&gt; _jpeg.tif&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$BASE&lt;/span&gt;
&lt;span class="nv"&gt;EXTENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ogrinfo -so obce/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.shp &lt;span class="nv"&gt;$BASE&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep Extent &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/Extent: //g&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/(//g&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/)//g&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/ - /, /g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;EXTENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$EXTENT&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk -F &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{print $1 &amp;quot; &amp;quot; $4 &amp;quot; &amp;quot; $3 &amp;quot; &amp;quot; $2}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
gdal_translate -projwin &lt;span class="nv"&gt;$EXTENT&lt;/span&gt; -of GTiff &lt;span class="nv"&gt;$OBEC&lt;/span&gt; output/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.tif
gdalwarp -dstalpha -s_srs &lt;span class="s1"&gt;&amp;#39;EPSG:5514&amp;#39;&lt;/span&gt; -t_srs &lt;span class="s1"&gt;&amp;#39;EPSG:5514&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -co &lt;span class="nv"&gt;COMPRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;JPEG &lt;span class="se"&gt;\&lt;/span&gt;
    -co &lt;span class="nv"&gt;TILED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES -&lt;span class="se"&gt;\&lt;/span&gt;
    of GTiff &lt;span class="se"&gt;\&lt;/span&gt;
    -cutline obce/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.shp &lt;span class="se"&gt;\&lt;/span&gt;
    output/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.tif output/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.final.tif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that if &lt;code&gt;gdalwarp&lt;/code&gt; doesn't recognize an EPSG code (which is the case for my country national grid), you might pass it as a PROJ.4 string.&lt;/p&gt;
&lt;p&gt;According to the point 5 in the above list, the script needs to be run in a loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; f in *_jpeg.tif&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; the_script_above.sh &lt;span class="nv"&gt;$f&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Wed, 10 Jun 2015 19:24:57 +0200</pubDate><guid>tag:www.zimmi.cz,2015-06-10:posts/2015/clip-raster-with-vector-using-gdal/</guid><category>linux</category><category>gdal</category></item><item><title>SSH GRASS Processing Status Check</title><link>http://www.zimmi.cz/posts/2015/ssh-grass-processing-status-check/</link><description>&lt;p&gt;I've been running some GRASS/PostGIS computations on a remote server that were taking hours to finish. Once in a while I checked for their state by issuing &lt;code&gt;tail log_XX.log&lt;/code&gt; from my laptop to see if they were ready yet. It suddenly became pretty annoying to check five different logs every ten minutes.&lt;/p&gt;
&lt;p&gt;Instead of waiting and checking the logs, I thought it would be great to automate this. And it would be awesome if checking was fun. So I wrote a simple routine that takes log number as an argument (every process logs to a separate logfile) and checks it every minute until it says &lt;em&gt;done&lt;/em&gt;. Right after that &lt;code&gt;notify-send&lt;/code&gt; gives me a neat popup and Queen starts playing their &lt;em&gt;We are the champions&lt;/em&gt; thanks to &lt;code&gt;mpg123&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;############ &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ############&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ssh user@remote.server &lt;span class="s2"&gt;&amp;quot;tail -n 30 path/to/my/log_&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.log&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; *&lt;span class="s2"&gt;&amp;quot;done&amp;quot;&lt;/span&gt;* &lt;span class="o"&gt;]]&lt;/span&gt;
        &lt;span class="k"&gt;then&lt;/span&gt;
            notify-send -u critical &lt;span class="s2"&gt;&amp;quot;Finally &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
            mpg123 -n &lt;span class="m"&gt;250&lt;/span&gt; ~/Music/queen-we_are_the_champions.mp3
            &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="nb"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not yet&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    sleep 60
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What seemed to be really frustrating makes me happy right now. Unless Freddie starts singing in the middle of the night.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sat, 30 May 2015 20:01:40 +0200</pubDate><guid>tag:www.zimmi.cz,2015-05-30:posts/2015/ssh-grass-processing-status-check/</guid><category>bash</category><category>linux</category></item><item><title>Filtering points by distance in PostGIS</title><link>http://www.zimmi.cz/posts/2015/filtering-points-by-distance-in-postgis/</link><description>&lt;p&gt;Filtering really big (millions of rows) point datasets by distance might get catchy when solved with wrong PostGIS functions. Without spatial indexes PostGIS would take ages to finish such task.&lt;/p&gt;
=======
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Michal Zimmermann</title><link>http://www.zimmi.cz/posts/</link><description>Pieces of knowledge from the world of GIS.</description><atom:link href="http://www.zimmi.cz/posts/feed.xml" rel="self"></atom:link><lastBuildDate>Mon, 06 Jul 2015 22:41:51 +0200</lastBuildDate><item><title>QGIS Tips For Collaborative Mapping</title><link>http://www.zimmi.cz/posts/2015/qgis-tips-for-collaborative-mapping/</link><description>&lt;p&gt;Right now I'm setting up a project aimed at crop evaluation over ortophotos, HR and VHR imagery. All the steps of evaluation will be done in QGIS with PostGIS used for data storage and post-processing.&lt;/p&gt;
&lt;p&gt;In the initial phase, fifteen GIS operators will be using QGIS to reshape geometries and fill attribute data accordingly. Fifteen are not so many, but it is enough to be a possible source of errors. Luckily, there are many things you can do with QGIS to prevent people from making mistakes.&lt;/p&gt;
&lt;h2&gt;QGIS project file is a friend&lt;/h2&gt;
&lt;p&gt;QGIS project, the .qgs file, is a pure XML and, unlike ESRI's .mxd, can be edited with any text editor. That's great advantage when you need to prepare one project for many different operators. My project has to load some database layers that should be different for different operators that have different database accounts.&lt;/p&gt;
&lt;p&gt;How do you do that? It's enough to create a project using your own credentials and then replace them with &lt;code&gt;USERNAME&lt;/code&gt; and &lt;code&gt;PASSWORD&lt;/code&gt; strings as seen below. What happens when the user loads the project?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;datasource&amp;gt;&lt;/span&gt;dbname=&amp;#39;database&amp;#39; host=host port=5432 user=&amp;#39;USERNAME&amp;#39; password=&amp;#39;PASSWORD&amp;#39; sslmode=require key=&amp;#39;qgis_id&amp;#39; srid=5514 type=POLYGON table=&amp;quot;schema&amp;quot;.&amp;quot;table&amp;quot; (wkb_geometry) sql=&lt;span class="nt"&gt;&amp;lt;/datasource&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A popup window will be shown asking him/her to handle bad layers, as QGIS will not be able to connect to the layer. When he/she fills in right credentials (just once), the layer will be loaded. Don't forget to &lt;strong&gt;use a table name that doesn't exist&lt;/strong&gt;, QGIS will use the credentials stored with PostGIS connection otherwise and won't ask for them. &lt;em&gt;I don't like this behaviour.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Using this multiple times for each user-specific layer is a great time saver.&lt;/p&gt;
&lt;h2&gt;Adjust attribute table to fit your needs&lt;/h2&gt;
&lt;p&gt;QGIS attribute table has so many settings you probably don't use on daily basis and yet they might be invaluable in such project. All of them are available from layer properties under the Fields tab.&lt;/p&gt;
&lt;p class='text-center'&gt;&lt;img src="http://www.zimmi.cz/posts/assets/qgis-tips-for-collaborative-mapping/hidden.png" width=50% class="img-responsive centered"&gt;&lt;/p&gt;

&lt;p&gt;Sadly, our PostGIS layers are very wide in terms of column count. Not all of the columns are to be edited or even seen by operators, so it might be a good idea to hide them by setting their Edit Widget to Hidden. Those that should be seen, but not edited, might be set as not editable by unchecking that option.&lt;/p&gt;
&lt;p&gt;Lots of our attributes use enumerations provided by our project partner as CSV files. We use them in QGIS as value maps, so operators don't have to type them manually - we both make their work easier and eliminate mistakes they made.&lt;/p&gt;
&lt;p class='text-center'&gt;&lt;img src="http://www.zimmi.cz/posts/assets/qgis-tips-for-collaborative-mapping/valuemap.png" width=50% class="img-responsive centered"&gt;&lt;/p&gt;

&lt;p&gt;Note QGIS swallows the first row of the given CSV file as if it was a header. Don't forget about this when creating your own enumerations. Once set, operators will see a friendly combo box instead of a hostile blank input in the attribute table.&lt;/p&gt;
&lt;p&gt;These are just small adjustments that can make a big difference in your QGIS workflow.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Mon, 06 Jul 2015 22:41:51 +0200</pubDate><guid>tag:www.zimmi.cz,2015-07-06:posts/2015/qgis-tips-for-collaborative-mapping/</guid><category>qgis</category></item><item><title>Filtering points by distance in PostGIS</title><link>http://www.zimmi.cz/posts/2015/filtering-points-by-distance-in-postgis/</link><description>&lt;p&gt;Filtering really big (millions of rows) point datasets by distance might get catchy when solved with wrong PostGIS functions. Without spatial indexes PostGIS would take ages to finish such task.&lt;/p&gt;
>>>>>>> Stashed changes
&lt;p&gt;&lt;a href="https://gis.stackexchange.com/questions/148184/why-the-execution-of-a-query-is-very-slow-using-postgis"&gt;Someone over StackExchange asked&lt;/a&gt; why the next query had been running for 15 hours (!) with no result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ST_Distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;
    &lt;span class="n"&gt;shp1&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;shp2&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;
    &lt;span class="n"&gt;ST_Intersects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ST_Difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;ST_Buffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;ST_Buffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt;
    &lt;span class="k"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The answer is quite simple: because it was using wrong functions. Let's see:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ST_Distance()&lt;/code&gt; does not use spatial index, it's a simple mathematical calculation, it's expensive and it can be replaced by spatial operator for point datasets.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ST_Buffer()&lt;/code&gt; will definitely take time to build polygons around points. And it's being run twice!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ST_Difference()&lt;/code&gt; needs more time to compare the buffers and return just the portion of space they don't share. Isn't it a huge waste to create buffers and then throw them away?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ST_Intersects()&lt;/code&gt; finally checks whether the point should be included in the result.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That was a great challenge to test my knowledge of how PostGIS works and here's my shot at it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt;
        &lt;span class="n"&gt;shp1&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shp2&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt;
        &lt;span class="k"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt;
        &lt;span class="n"&gt;ST_DWithin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;sq&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;
    &lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;I use &lt;a href="http://postgis.net/docs/geometry_distance_centroid.html"&gt;&lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt;&lt;/a&gt;, a.k.a geometry distance centroid instead of &lt;code&gt;ST_Distance()&lt;/code&gt;. It takes advantage of spatial indexes, thus it's fast. And it's perfectly fine to use it with point dataset, because the centroid of a bounding box of a point is? That point, exactly. &lt;strong&gt;Spatial indexes have to be built beforehand.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Buffers are not necessary to check whether a geometry lies in a certain distance from another one. That's what &lt;code&gt;ST_Dwithin()&lt;/code&gt; was made for. With the inner &lt;code&gt;WHERE&lt;/code&gt; clause I get all the points lying at most 2,000 meters from the current, having the absolute value difference bigger than 400. &lt;code&gt;ST_Dwithin()&lt;/code&gt; will make use of any spatial index available, unlike &lt;code&gt;ST_Distance()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The outer &lt;code&gt;WHERE&lt;/code&gt; clause throws away all the points closer than 500 meters. Remember, we already got only those not further than 2,000 meters from the previous step.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It took PostGIS 1060545,590 ms (~ 17 minutes) on my Quad-Core Intel® Core™ i5-4210M CPU @ 2.60GHz, 4 GB RAM, 500 GB SSD hard drive, PostgreSQL 9.3 and PostGIS 2.1 with two point datasets having 4M and 300K rows, respectively.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sat, 30 May 2015 20:01:40 +0200</pubDate><guid>tag:www.zimmi.cz,2015-05-30:posts/2015/filtering-points-by-distance-in-postgis/</guid><category>postgis</category></item><item><title>Animating SVG Maps With SMIL</title><link>http://www.zimmi.cz/posts/2015/animating-svg-maps-with-smil/</link><description>&lt;p&gt;Using SVG to build web maps have both pros and cons and to be honest I don't know any &lt;em&gt;serious&lt;/em&gt; map/GIS project built on top of SVG. However, as a part of my job at university, I was forced to use both SVG and SMIL to produce animated web map (see the small version below or the big one at &lt;a href="https://zimmicz.github.io/svg-smil-airplanes/map.svg"&gt;GitHub&lt;/a&gt;) and I'd like to share my findings.&lt;/p&gt;
&lt;p&gt;&lt;object width="400" data="https://zimmicz.github.io/svg-smil-airplanes/map.svg" type="image/svg+xml"&gt;&lt;/object&gt;&lt;/p&gt;
&lt;h2&gt;Data preprocessing&lt;/h2&gt;
&lt;p&gt;I chose &lt;a href="http://www.naturalearthdata.com/"&gt;Natural Earth dataset&lt;/a&gt; both for basemap and thematic layer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;countries polygon layer for basemap&lt;/li&gt;
&lt;li&gt;airports point layer for thematic layer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I decided that animation should go like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Load basemap and Vaclav Havel airport (PRG).&lt;/li&gt;
&lt;li&gt;Animate destinations one by one. They are revealed in order of their distance from PRG.&lt;/li&gt;
&lt;li&gt;Animate airways.&lt;/li&gt;
&lt;li&gt;Once airways are animated, animate airplanes along their path from PRG to their destination in order of their time of departure.&lt;/li&gt;
&lt;li&gt;Profit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My goal was to create an animation of all departures from Vaclav Havel airport during one day. These data can be obtained at &lt;a href="http://www.flightstats.com/"&gt;FlightStats&lt;/a&gt;, I didn't find a way make this process automatic though. &lt;a href="http://openflights.org/"&gt;OpenFlights&lt;/a&gt; might be better source then.&lt;/p&gt;
&lt;h2&gt;SVG creation&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://kartograph.org/"&gt;Kartograph&lt;/a&gt; is a great tool both for SVG generation and scripting. What a pity it's probably a dead project according to the last commit date. After installing Python part of library used to create SVG files out of vector geometries, it can be run with something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;kartograph --output map.svg --pretty-print --style style.css config.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty self-explanatory, let's have a look at config file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;layers&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;countries&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ne_50m_admin_0_countries/ne_50m_admin_0_countries.shp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;attributes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;airports&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ne_10m_airports/ne_10m_airports_prg.shp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;attributes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abbrev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;travels&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ne_10m_airports/travels.shp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;attributes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;distance&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;grid&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;special&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;graticule&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;latitudes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;longitudes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;proj&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;satellite&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;lon0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;lat0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;48.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;dist&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;up&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;bounds&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;mode&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bbox&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;padding&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;export&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;round&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;ratio&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is possible to adjust map settings in many different ways. The most important/interesting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Choose what attributes you want to have exported from source file with &lt;code&gt;attributes&lt;/code&gt; key for every layer. They'll be available as &lt;code&gt;data-&lt;/code&gt; attribute of SVG elements.&lt;/li&gt;
&lt;li&gt;It comes with Grid generation packed in! Really great. Sea generation works for some projections only.&lt;/li&gt;
&lt;li&gt;Set the projections you want to use with additional settings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bounds&lt;/code&gt; settings should - according to the docs - use layer extent as well, I couldn't make it work though. Use &lt;code&gt;[-180, -90, 180, 90]&lt;/code&gt; as a workaround to get the whole world. Don't forget to set &lt;code&gt;padding&lt;/code&gt;, so your map doesn't get clipped on edges.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt;ing coordinates rounded to one decimal place makes your SVG a lot smaller.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can change SVG look with simple CSS, just be sure to use layer names as CSS ids:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#airports&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#CC0000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#660000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#countries&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e6deb4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#a59f81&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#grid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#d0d0d0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#travels&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1f78b4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dasharray&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Data adjustment &amp;amp; animation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;SMIL&lt;/strong&gt; is a XML based language for multimedia representation. It comes ready for timing, animation, visual transitions etc. I guess it might be considered easier to read for a web development beginner. Once you start using it, you immediately realize it suffers from the same disease like XML does: it is so wordy!&lt;/p&gt;
&lt;p&gt;Let's get back to my example. To animate airports one by one, let's give them unique ids, so they look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;brs&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;stroke-opacity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;fill-opacity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;476.597304864&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;539.487783171&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-abbrev=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;BRS&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bristol Int&amp;#39;l&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's something you do by hand as kartograph doesn't give ids to SVG elements. Once you're done with that, you can run SMIL animation. If you look closer at the final map, you'll notice there are three properties animated for each airport: fill opacity, stroke opacity and radius. Each property needs to use separate SMIL &lt;code&gt;&amp;lt;animate /&amp;gt;&lt;/code&gt;, which might look like the one below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;animate&lt;/span&gt; &lt;span class="na"&gt;attributeName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fill-opacity&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;kos_ani_fo&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;from=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;to=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;begin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;osr_ani.end&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;dur=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.25s&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;freeze&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xlink:href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#kos&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;animate&lt;/span&gt; &lt;span class="na"&gt;attributeName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stroke-opacity&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;kos_ani_so&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;from=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;to=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;begin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;osr_ani.end&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;dur=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.25s&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;freeze&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xlink:href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#kos&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;animate&lt;/span&gt; &lt;span class="na"&gt;attributeName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;kos_ani_r&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;from=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10px&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;to=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3px&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;begin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;osr_ani.end&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;dur=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.25s&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xlink:href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#kos&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I guess you get the idea how long this would take for more airports. Make sure to notice that SMIL can start animation based on another animation's end (&lt;code&gt;osr_ani.end&lt;/code&gt;) - that's pretty neat.&lt;/p&gt;
&lt;p&gt;Airways animation works almost the same. First, add unique id to each airway:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;M550.9,562.9L568.0,495.0 &amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;travel-arn&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Second, start animation after all the airports are visible on the map. Notice the initial definition of &lt;code&gt;d&lt;/code&gt; attribute - it's a line with zero length.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;animate&lt;/span&gt; &lt;span class="na"&gt;attributeName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path_ani&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;from=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;M550.9,562.9L550.9,562.9&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;to=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;M550.9,562.9L568.0,495.0&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;begin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icn_ani_r.end&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;dur=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3s&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xlink:href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#travel-arn&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once airways animation has finished, let airplanes fly around the globe with a simple JavaScript function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * @param  number coef  scale radius by number of flights to the given destination&lt;/span&gt;
&lt;span class="cm"&gt; * @param  string flight_id&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;flight_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timeshift&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;svgns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://www.w3.org/2000/svg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;svgDocument&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;motion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;svgDocument&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElementNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;svgns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;animateMotion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;animation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;svgDocument&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElementNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;svgns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;animate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;shape&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;svgDocument&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElementNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;svgns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;circle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;timeshift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flight_id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getAttributeNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data-dist&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;begin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dur&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dur&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flight_id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getAttributeNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;xlink:href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;flight_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;flight_id&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_motion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;attributeName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;opacity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;from&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;begin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;dur&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dur&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.1s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fill&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;freeze&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttributeNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttributeNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fill&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1f78b4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttributeNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stroke&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1f78b4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;airplane-&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;flight_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;airplanes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;SMIL with SVG seems to be interesting option for web map animation, a bit lengthy though. Syncing animations can easily become pain in the ass (&lt;a href="https://stackoverflow.com/questions/29897355/svg-smil-animatemotion-only-triggers-once/"&gt;see StackOverflow thread&lt;/a&gt;). Never call your function &lt;code&gt;animate&lt;/code&gt; - there is namesake function defined in &lt;a href="https://w3c.github.io/web-animations/"&gt;Web Animations API&lt;/a&gt; that makes animation crash in Chrome. &lt;code&gt;&amp;lt;animateMotion /&amp;gt;&lt;/code&gt; is a great tool to animate elements along path.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Wed, 29 Apr 2015 18:24:00 +0200</pubDate><guid>tag:www.zimmi.cz,2015-04-29:posts/2015/animating-svg-maps-with-smil/</guid><category>svg</category><category>smil</category></item><item><title>GRASS: Big Buffers Made Easy</title><link>http://www.zimmi.cz/posts/2015/grass-big-buffers-made-easy/</link><description>&lt;p&gt;Recently I've written about &lt;a href="/2015/postgis-buffers-intersections-differences-and-collections/"&gt;struggling with fairly complex geometries in PostGIS&lt;/a&gt;. Lesson learned from the last time was to use more smaller geometries instead of several really huge. You can obtain the small ones from the big by &lt;a href="/2015/postgis-rectangular-grid-creation/"&gt;cutting it with a grid&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A supervisor of a project I've been working on came up with a task that totally buried the previous process in a blink of an eye: &lt;strong&gt;Give me the buffer (diffed with original geometries) that is smoothed on the outer bounds so there are no edges shorter than 10 cm.&lt;/strong&gt; I sighed. Then, I cursed. Then, I gave it a try with PostGIS. Achieving this goal involves these steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dissolve intersecting buffers&lt;/li&gt;
&lt;li&gt;Run some kind of generalization algorithm that is not defined in PostGIS&lt;/li&gt;
&lt;li&gt;Diff original geometries&lt;/li&gt;
&lt;li&gt;Cut buffer with grid so it works &lt;del&gt;faster&lt;/del&gt; not so slow for the next steps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Two of those four are rather problematic with PostGIS: line smoothing and diffing the original geometries (I didn't get to the last one, so it might be 3 of 4 as well).&lt;/p&gt;
&lt;h2&gt;Hello, I'm GRASS&lt;/h2&gt;
&lt;p&gt;I haven't used GRASS for ages and even back then I didn't get to know it much, but it saved the day for me this time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;grass -text path/to/mapset -c&lt;/span&gt;

&lt;span class="x"&gt;v.in.ogr input=&amp;quot;PG:host=localhost dbname=db user=postgres password=postgres&amp;quot; output=ilot_050 layer=ilot_2015_050 snap=-1 --overwrite&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; turn the snapping off, I don&amp;#39;t want the input changed in any way, even though it is not topologically valid&lt;/span&gt;
&lt;span class="x"&gt;v.in.ogr input=&amp;quot;PG:host=localhost dbname=db user=postgres password=postgres&amp;quot; output=lollipops_050 layer=lollipops.lollipops_2015_050_tmp snap=-1 --overwrite&lt;/span&gt;
&lt;span class="x"&gt;v.in.ogr input=&amp;quot;PG:host=localhost dbname=db user=postgres password=postgres&amp;quot; output=holes_050 layer=phase_3.holes_050 snap=-1 --overwrite&lt;/span&gt;
&lt;span class="x"&gt;v.db.addcolumn map=ilot_050 columns=&amp;quot;id_0 int&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;v.db.update map=ilot_050 column=id_0 value=1&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; dissolve didn&amp;#39;t work without a column specified, dunno why&lt;/span&gt;
&lt;span class="x"&gt;v.dissolve input=ilot_050 column=id_0 output=ilot_050_dissolve --overwrite&lt;/span&gt;
&lt;span class="x"&gt;v.buffer input=ilot_050_dissolve output=ilot_050_buffer distance=20 --overwrite&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; v.out and v.in routine used just because I didn&amp;#39;t get the way attributes work in GRASS, would do it differently next time&lt;/span&gt;
&lt;span class="x"&gt;v.out.ogr input=ilot_050_buffer output=ilot_050_buffer format=ESRI_Shapefile --overwrite&lt;/span&gt;
&lt;span class="x"&gt;v.in.ogr input=ilot_050_buffer output=ilot_050_buffer snap=-1 --overwrite&lt;/span&gt;
&lt;span class="x"&gt;v.overlay ainput=ilot_050_buffer binput=holes_050 operator=or output=combined_050_01 snap=-1 --overwrite&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; tried v.patch to combine the three layers, it gave some strange results in the final overlay&lt;/span&gt;
&lt;span class="x"&gt;v.overlay ainput=combined_050_01 binput=lollipops_050 operator=or output=combined_050_02 snap=-1 --overwrite&lt;/span&gt;
&lt;span class="x"&gt;v.out.ogr input=combined_050_02 output=combined_050 format=ESRI_Shapefile --overwrite&lt;/span&gt;
&lt;span class="x"&gt;v.in.ogr input=combined_050 output=combined_050_in snap=-1 --overwrite&lt;/span&gt;
&lt;span class="x"&gt;v.db.addcolumn map=combined_050_in columns=&amp;quot;id_1 int&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;v.db.update map=combined_050_in column=id_1 value=1&lt;/span&gt;
&lt;span class="x"&gt;v.dissolve input=combined_050_in column=id_1 output=combined_050_dissolve --overwrite&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; get rid of &amp;lt; 10cm edges&lt;/span&gt;
&lt;span class="x"&gt;v.generalize input=combined_050_dissolve output=combined_050_gen method=reduction threshold=0.1 --overwrite&lt;/span&gt;
&lt;span class="x"&gt;v.out.ogr input=combined_050_gen output=combined_050_gen format=ESRI_Shapefile --overwrite&lt;/span&gt;
&lt;span class="x"&gt;v.in.ogr input=combined_050_gen output=combined_050_gen snap=-1 --overwrite&lt;/span&gt;
&lt;span class="x"&gt;v.overlay ainput=combined_050_gen binput=ilot_050 operator=not snap=1e-05 --overwrite output=ilot_050_diff&lt;/span&gt;
&lt;span class="x"&gt;v.out.postgis input=ilot_050_diff output=&amp;quot;PG:dbname=db user=postgres password=postgres&amp;quot; output_layer=onf3.buffer_050_diff options=&amp;quot;GEOMETRY_NAME=wkb_geometry,SRID=2154&amp;quot; --overwrite&lt;/span&gt;
&lt;span class="x"&gt;v.in.ogr input=&amp;quot;PG:host=localhost dbname=ign user=postgres password=postgres&amp;quot; output=buffer_050 layer=onf3.buffer_050_diff snap=-1 --overwrite&lt;/span&gt;
&lt;span class="x"&gt;v.in.ogr input=&amp;quot;PG:host=localhost dbname=ign user=postgres password=postgres&amp;quot; output=grid layer=grid snap=-1 --overwrite&lt;/span&gt;
&lt;span class="x"&gt;v.db.connect -d map=buffer_050&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; instead of v.out and v.in routine&lt;/span&gt;
&lt;span class="x"&gt;db.connect driver=sqlite database=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;GISDBASE&lt;/span&gt;&lt;span class="x"&gt;/&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LOCATION_NAME&lt;/span&gt;&lt;span class="x"&gt;/&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;MAPSET&lt;/span&gt;&lt;span class="x"&gt;/sqlite.db&amp;#39;&lt;/span&gt;
&lt;span class="x"&gt;v.db.addtable map=buffer_050&lt;/span&gt;
&lt;span class="x"&gt;v.overlay ainput=buffer_050 binput=grid operator=and output=buffer_050_grid snap=-1 --overwrite&lt;/span&gt;
&lt;span class="x"&gt;v.out.postgis input=buffer_050_grid output=&amp;quot;PG:dbname=ign user=postgres password=postgres&amp;quot; output_layer=onf3.buffer_050_diff_grid options=&amp;quot;GEOMETRY_NAME=wkb_geometry,SRID=2154&amp;quot; --overwrite&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;It is damn fast&lt;/strong&gt; compared to PostGIS. It can be automated. It can be parametrized. It is robust. It is great!&lt;/p&gt;
&lt;h2&gt;Lesson learned&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You cannot smooth lines by deleting edges shorter than &lt;code&gt;n&lt;/code&gt; in PostGIS. At least I haven't found the way to do so without defining your own procedure. You can with GRASS.&lt;/li&gt;
&lt;li&gt;GRASS reduction algorithm always keep first and last node untouched. Thus, if they're closer than &lt;code&gt;n&lt;/code&gt;, they'll stay even if you'd like to have them deleted.&lt;/li&gt;
&lt;li&gt;Getting to grips with GRASS attribute data is rather hard after using shapefiles all your GIS life.&lt;/li&gt;
&lt;li&gt;It is great to exploit synergy of different GIS tools used for what they're best at.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The more I work with big data, the more I get used to not seeing them. That's kind of a twist after crafting maps at university.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Mon, 20 Apr 2015 21:06:00 +0200</pubDate><guid>tag:www.zimmi.cz,2015-04-20:posts/2015/grass-big-buffers-made-easy/</guid><category>grass</category></item><item><title>PostGIS: Finding Biggest Land Users Nearby</title><link>http://www.zimmi.cz/posts/2015/postgis-finding-biggest-land-users-nearby/</link><description>&lt;p&gt;At &lt;a href="http://clevermaps.cz"&gt;CleverMaps&lt;/a&gt; we heavily rely on the cadastre of real estate, which is probably the biggest data source in my country. Using their excellent knowledge of this data set, my teammates often supply me with all kinds of weird challenges.&lt;/p&gt;
&lt;h2&gt;Give me the biggest land users nearby&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Find the biggest land users in surrounding cadastral communities for each cadastral community (~ 13K)&lt;/em&gt; being the latest task, here's the query I tackled it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;WITH users_ AS (
    SELECT
        cad_code,
        id,
        zipcode,
        city,
        concat_ws(&amp;#39; &amp;#39;,street, concat_ws(&amp;#39;/&amp;#39;, house_number, street_number)) as street,
        name,
        &amp;#39;Users with more than 10 ha&amp;#39;::text note,
        SUM(acreage) area
        FROM land_blocks -- being a table with info about all the agricultural land blocks
        JOIN users u ON id_uz = id
        GROUP BY cad_code, u.id
        HAVING SUM(acreage) &amp;gt; 10
),
ints AS (
    SELECT
        ku.cad_code as community,
        ku2.cad_code as surrounding,
        ku2.cad_name
    FROM cadastral_community ku
    JOIN cadastral_community ku2
        ON ST_Intersects(ku.geom, ku2.geom)
    WHERE ku.cad_code &amp;lt;&amp;gt; ku2.cad_code
)
SELECT
    DISTINCT ON (surrounding, cad_name, u.zipcode, u.city, u.street, u.name)
    surrounding,
    cad_name,
    u.zipcode,
    u.city,
    u.street,
    u.name,
    u.note,
    u.area
FROM
    users_ u
JOIN ints
    ON cad_code = community;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Few things to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;concat_ws()&lt;/code&gt; is a great function for joining values that might be &lt;code&gt;NULL&lt;/code&gt;. If such a value is found, it is skipped and the function continues with the next one (if any). Thus, you'll never get a string ending with a trailing slash (&lt;code&gt;Street name 55/&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;With &lt;code&gt;users_&lt;/code&gt; CTE I get a list of owners having more than 10 hectares of land for each cadastral community. This gives me the inverse result of what I want (if I know the biggest owners in the cadastral community, I know these are the ones that should be listed for surrounding c. communities).&lt;/li&gt;
&lt;li&gt;This &lt;em&gt;putting-it-all-together&lt;/em&gt; step is done with &lt;code&gt;ints&lt;/code&gt; CTE that outputs the list of surrounding c. communities for each of them.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DISTINCT ON&lt;/code&gt; cleans up the list so the same owners don't appear more than once for any given c. community.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Writing this makes me realize the list should be probably sorted by area so only the occurence with the biggest value is kept for each c. community. Simple &lt;code&gt;ORDER BY&lt;/code&gt; should deal with this just fine. Or even more sophisticated, using &lt;code&gt;GROUP BY&lt;/code&gt; to output the total acreage in all surrounding c. communities.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Fri, 03 Apr 2015 10:29:00 +0200</pubDate><guid>tag:www.zimmi.cz,2015-04-03:posts/2015/postgis-finding-biggest-land-users-nearby/</guid><category>postgresql</category><category>postgis</category></item><item><title>PostGIS: Count Line Self-Intersections</title><link>http://www.zimmi.cz/posts/2015/postgis-count-line-self-intersections/</link><description>&lt;p&gt;&lt;a href="https://gis.stackexchange.com/questions/107927/counting-self-intersections-of-linestring-using-postgis/140674#140674"&gt;Is there a way of using PostgreSQL + PostGIS for finding the number of self intersections in a linestring?&lt;/a&gt; was a question that made me think of this problem. I came up with a solution that takes just a few lines of code.&lt;/p&gt;
&lt;p&gt;Assume the following geometries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;CREATE TABLE test2 (
    id integer NOT NULL,
    wkb_geometry geometry(LineString,5514)
);
COPY test2 (id, wkb_geometry) FROM stdin;
1   01020000208A15000004000000CCDC7845E339EEBFF2003B4A8A08E1BFE4154DAB7C31DCBF24C2042773E3E53F2287BA2CC591E43F604749BFE3B2E2BF2AE9770A11B8F0BF9C91435D56C0C63F
2   01020000208A1500000600000050212BF9E63EC03F1FA046FD69F1EA3F504D44212915EA3F74A99EDF44E3F33F2CE2805DFAB1F33F805D24B1B189DC3F9834DE5938C1F53FB56F1FBF8AAFEC3F24D0C85B4666EA3FF311B0D8D75BE93F306EAA073894D23FA841B27E3404F33F
\.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="http://www.zimmi.cz/posts/assets/postgis-count-line-self-intersections/lines.png" title="Self-intersecting lines" class="img-responsive centered"&gt;&lt;/p&gt;
&lt;p&gt;Note that those geometries are valid while not being simple, thus, &lt;code&gt;ST_IsValidReason()&lt;/code&gt; wouldn't help much. What if we compared it to their single counterparts? Those would have had vertices at intersections. Once you know the original number of vertices and the number of simple geometry vertices, it is fairly easy to subtract those two.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;WITH noded AS (
SELECT id, COUNT(id)
FROM (
    SELECT DISTINCT (ST_DumpPoints(ST_Node(wkb_geometry))).geom, id
    FROM test
) tmp  group by id
),
test AS (
    SELECT id, COUNT(id)
        FROM (
            SELECT DISTINCT (ST_DumpPoints(wkb_geometry)).geom, id
            FROM test
        ) tmp  group by id
)

SELECT noded.id, noded.count - test.count cnt FROM noded JOIN test USING (id);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This query gives you geometry id and the difference in number of vertices between the original and simple geometry. Note the &lt;code&gt;DISTINCT&lt;/code&gt; in the &lt;code&gt;noded&lt;/code&gt; CTE - with &lt;code&gt;ST_Node()&lt;/code&gt; you get &lt;code&gt;one vertex x number of intersecting lines&lt;/code&gt; for each intersection. &lt;code&gt;DISTINCT&lt;/code&gt; gives you just one of them.&lt;/p&gt;
&lt;p&gt;The query result on my &lt;code&gt;test&lt;/code&gt; table:
&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;id&lt;/th&gt;
        &lt;th&gt;cnt&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Mon, 30 Mar 2015 09:12:00 +0200</pubDate><guid>tag:www.zimmi.cz,2015-03-30:posts/2015/postgis-count-line-self-intersections/</guid><category>postgresql</category><category>postgis</category></item><item><title>PostGIS: Rectangular Grid Creation</title><link>http://www.zimmi.cz/posts/2015/postgis-rectangular-grid-creation/</link><description>&lt;p&gt;Creating a rectangular grid to cover a given extent with same sized cells is one of the basic GIS tasks I've had to solve several times so far. I used QGIS or some Python to give me a bunch of &lt;code&gt;INSERT&lt;/code&gt; statements to run in PostGIS database, now I've come with a final solution at last.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;CREATE OR REPLACE FUNCTION cm_grid(
    blx float8, -- bottom left x coordinate
    bly float8, -- bottom left y coordinate
    trx float8, -- top right x coordinate
    try float8, -- top right y coordinate
    xsize float8, -- cell width
    ysize float8, -- cell height
    srid integer DEFAULT 5514,
    OUT col varchar,
    OUT &amp;quot;row&amp;quot; varchar,
    OUT geom geometry
) RETURNS SETOF record AS
$$
DECLARE
    width float8; -- total area width
    height float8; -- total area height
    cols integer;
    rows integer;
BEGIN
    width  := @($1 - $3); -- absolute value
    height := @($2 - $4); -- absolute value
    cols   := ceil(width / xsize);
    rows   := ceil(height / ysize);
    RETURN QUERY
        SELECT
            cast(
                lpad((i)::varchar,
                CASE WHEN
                    char_length(rows::varchar) &amp;gt; char_length(cols::varchar)
                        THEN  char_length(rows::varchar)
                        ELSE char_length(cols::varchar)
                END,
                &amp;#39;0&amp;#39;)
                AS varchar
            ) AS row,
            cast(
                lpad((j)::varchar,
                CASE WHEN
                    char_length(rows::varchar) &amp;gt; char_length(cols::varchar)
                        THEN  char_length(rows::varchar)
                        ELSE char_length(cols::varchar)
                END,
                &amp;#39;0&amp;#39;) AS varchar
            ) AS col,
            ST_SetSRID(
                ST_GeomFromText(
                    &amp;#39;POLYGON((&amp;#39; ||
                        array_to_string(
                            ARRAY[i * xsize + blx, j * ysize + bly],
                            &amp;#39; &amp;#39;
                        ) || &amp;#39;,&amp;#39; ||
                        array_to_string(
                            ARRAY[i * xsize + blx, (j+1) * ysize + bly],
                            &amp;#39; &amp;#39;
                        ) || &amp;#39;,&amp;#39; ||
                        array_to_string(
                            ARRAY[(i+1) * xsize + blx, (j+1) * ysize + bly],
                            &amp;#39; &amp;#39;
                        ) || &amp;#39;,&amp;#39; ||
                        array_to_string(
                            ARRAY[(i+1) * xsize + blx, j * ysize + bly],
                            &amp;#39; &amp;#39;
                        ) || &amp;#39;,&amp;#39; ||
                        array_to_string(
                            ARRAY[i * xsize + blx, j * ysize + bly],
                            &amp;#39; &amp;#39;
                        ) || &amp;#39;
                    ))&amp;#39;
                )
            , srid) AS geom
        FROM
            generate_series(0, cols) AS i,
            generate_series(0, rows) AS j;
END;
$$
LANGUAGE plpgsql;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you call it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;CREATE TABLE grid AS
SELECT *
FROM cm_grid(-675593.69, -1057711.19, -672254.69, -1054849.19, 333.47, 333.47);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Few notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it takes bounding box coordinates (bottom left, top right) for an extent,&lt;/li&gt;
&lt;li&gt;followed by cell width and height,&lt;/li&gt;
&lt;li&gt;and optional SRID (defaults to 5514 which is Czech national grid),&lt;/li&gt;
&lt;li&gt;each cell is indexed with &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;col&lt;/code&gt; number&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The messy &lt;code&gt;CASE&lt;/code&gt; statement makes sure both &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;col&lt;/code&gt; are of the same length. I used &lt;code&gt;array_to_string&lt;/code&gt; for better readability. It might not be the fastest way, didn't do any benchmarks.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 24 Mar 2015 17:47:00 +0100</pubDate><guid>tag:www.zimmi.cz,2015-03-24:posts/2015/postgis-rectangular-grid-creation/</guid><category>postgresql</category><category>postgis</category></item><item><title>PostGIS: Buffers, Intersections, Differences And Collections</title><link>http://www.zimmi.cz/posts/2015/postgis-buffers-intersections-differences-and-collections/</link><description>&lt;p&gt;Being part of &lt;a href="http://clevermaps.cz"&gt;CleverMaps&lt;/a&gt; means doing lot of nasty work with PostGIS. Recently, I've been given a following task that needed to be done for a really big project dealing with agricultural parcels:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;given a polygonal shapefile of agricultural parcels, create 20m wide buffers around all of them,&lt;/li&gt;
&lt;li&gt;extract holes from these parcels,&lt;/li&gt;
&lt;li&gt;clip buffers so they don't overlap with other parcels,&lt;/li&gt;
&lt;li&gt;get rid of overlaps between nearby parcels (e.g. dissolve them),&lt;/li&gt;
&lt;li&gt;create output combined from holes and buffers,&lt;/li&gt;
&lt;li&gt;the output must not contain features having more than ~1,000,000 vertices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This process is going to be run ~20&amp;times; on layers with ~40,000-70,000 polygons.&lt;/p&gt;
&lt;h2&gt;Input data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;polygonal layer of agricultural parcels&lt;/li&gt;
&lt;li&gt;rectangular grid (7.5 &amp;times; 7.5 km) for cutting the output&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;First try&lt;/h2&gt;
&lt;p&gt;My initial effort was to union all the buffers and then clip them with a rectangular grid. Long story short: &lt;strong&gt;Don't do that. Never. Ever. I mean it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It works fine until you end up with one huge multipolygon having like ~2,000,000 vertices. But then you need to split it somehow so you meet the 1,000,000 limit rule (see list above). Spatial index doesn't help you much in such cases, so that really huge polygon is being cut by every rectangle it intersects and it takes hours and hours. It's just a no go.&lt;/p&gt;
&lt;h2&gt;The other way round&lt;/h2&gt;
&lt;p&gt;Let's put it the other way round. First, split buffers by rectangular grid, doing union on each cell separately.&lt;/p&gt;
&lt;h3&gt;Import&lt;/h3&gt;
&lt;p&gt;Using the swiss knife of GIS to import the data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;export SHAPE_ENCODING=&amp;quot;ISO-8859-1&amp;quot;
ogr2ogr -f PostgreSQL PG:&amp;quot;dbname=db user=postgres&amp;quot; parcels.shp -lco ENCODING=UTF-8 -t_srs &amp;quot;EPSG:2154&amp;quot;
ogr2ogr -f PostgreSQL PG:&amp;quot;dbname=db user=postgres&amp;quot; grid.shp -lco ENCODING=UTF-8 -t_srs &amp;quot;EPSG:2154&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;PostGIS processing&lt;/h3&gt;
&lt;p&gt;Recently I stumbled upon a psql &lt;code&gt;\set&lt;/code&gt; command. Launching several queries on the same table, it might be useful to define it's name with &lt;code&gt;\set table tablename&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;\set table &amp;#39;parcels&amp;#39;
-- prepare separate table for holes (inner rings)
DROP TABLE IF EXISTS holes;
CREATE TABLE holes (
id serial,
ilot_id varchar,
wkb_geometry geometry(&amp;#39;Polygon&amp;#39;, 2154),
path integer);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I found the following query an easy way to get all the rings from geometries having more than one ring:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;INSERT INTO holes (ilot_id, wkb_geometry, path) (
SELECT id,
    (ST_DumpRings(wkb_geometry)).geom::geometry(&amp;#39;Polygon&amp;#39;, 2154) as wkb_geometry,
    unnest((ST_DumpRings(wkb_geometry)).path) as path
FROM :table
WHERE ST_NRings(wkb_geometry) &amp;gt; 1
);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here's a little trick. Doing some checks I found out that some of the polygons had two rings without having any inner ring, both of them being the same. I guess this comes from some kind of human error. This query thus deletes all rings with &lt;code&gt;path = 0&lt;/code&gt; (exterior rings). At the same time, it deals with that &lt;em&gt;invalid&lt;/em&gt; polygons by checking their spatial relationship to parcels.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;DELETE FROM holes
    WHERE path = 0
    OR id IN (
        SELECT holes.id
        FROM holes
        JOIN :table ON
            ST_Within(
                ST_Buffer(holes.wkb_geometry,-1),
                :table.wkb_geometry
            )
        AND holes.wkb_geometry &amp;amp;&amp;amp; :table.wkb_geometry
);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To my surprise, it is possible that parcel has a hole with another parcel being in that hole. Argh. Find those and get rid of them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;DROP TABLE IF EXISTS ints;
CREATE TABLE ints AS
    SELECT holes.*
    FROM holes
    JOIN :table ON ST_Intersects(holes.wkb_geometry, :table.wkb_geometry)
    AND ST_Relate(holes.wkb_geometry, :table.wkb_geometry, &amp;#39;2********&amp;#39;);
DELETE FROM holes
WHERE id IN (SELECT id FROM ints);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I still need to get the difference between the hole geometry and the parcel that resides inside it - this difference is the actual hole I'm looking for.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;DROP TABLE IF EXISTS diff_ints;
CREATE TABLE diff_ints AS
    SELECT
        ints.id,
        ST_Difference(
            ints.wkb_geometry,
            ST_Collect(:table.wkb_geometry)
        ) wkb_geometry
    FROM ints, :table
    WHERE ST_Within(:table.wkb_geometry, ints.wkb_geometry)
    GROUP BY ints.wkb_geometry, ints.id;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And I'm done with holes. Get back to buffers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;DROP TABLE IF EXISTS buffer;
CREATE TABLE buffer AS
    SELECT id, ST_Buffer(wkb_geometry, 20) wkb_geometry
    FROM :table;
CREATE INDEX buffer_gist_idx ON buffer USING gist(wkb_geometry);
ALTER TABLE buffer ADD PRIMARY KEY(id);
VACUUM ANALYZE buffer;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Combine all the parts together.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;DROP&lt;/span&gt; &lt;span class="nt"&gt;TABLE&lt;/span&gt; &lt;span class="nt"&gt;IF&lt;/span&gt; &lt;span class="nt"&gt;EXISTS&lt;/span&gt; &lt;span class="nt"&gt;diff&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;CREATE&lt;/span&gt; &lt;span class="nt"&gt;TABLE&lt;/span&gt; &lt;span class="nt"&gt;diff&lt;/span&gt; &lt;span class="nt"&gt;AS&lt;/span&gt;
    &lt;span class="nt"&gt;SELECT&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nc"&gt;.id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ST_Difference&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nc"&gt;.wkb_geometry&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ST_Union&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;ST_MakeValid&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="nc"&gt;.wkb_geometry&lt;/span&gt;&lt;span class="o"&gt;)))&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;wkb_geometry&lt;/span&gt;
    &lt;span class="nt"&gt;FROM&lt;/span&gt; &lt;span class="nt"&gt;buffer&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;:table&lt;/span&gt; &lt;span class="nt"&gt;b&lt;/span&gt;
    &lt;span class="nt"&gt;WHERE&lt;/span&gt; &lt;span class="nt"&gt;ST_Intersects&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nc"&gt;.wkb_geometry&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="nc"&gt;.wkb_geometry&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nt"&gt;GROUP&lt;/span&gt; &lt;span class="nt"&gt;BY&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nc"&gt;.id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nc"&gt;.wkb_geometry&lt;/span&gt;
    &lt;span class="nt"&gt;UNION&lt;/span&gt;
    &lt;span class="nt"&gt;SELECT&lt;/span&gt; &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:varchar&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;wkb_geometry&lt;/span&gt; &lt;span class="nt"&gt;FROM&lt;/span&gt; &lt;span class="nt"&gt;holes&lt;/span&gt;
    &lt;span class="nt"&gt;UNION&lt;/span&gt;
    &lt;span class="nt"&gt;SELECT&lt;/span&gt; &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:varchar&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;wkb_geometry&lt;/span&gt; &lt;span class="nt"&gt;FROM&lt;/span&gt; &lt;span class="nt"&gt;diff_ints&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;CREATE&lt;/span&gt; &lt;span class="nt"&gt;INDEX&lt;/span&gt; &lt;span class="nt"&gt;diff_gist_idx&lt;/span&gt; &lt;span class="nt"&gt;ON&lt;/span&gt; &lt;span class="nt"&gt;diff&lt;/span&gt; &lt;span class="nt"&gt;USING&lt;/span&gt; &lt;span class="nt"&gt;gist&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;wkb_geometry&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;VACUUM&lt;/span&gt; &lt;span class="nt"&gt;ANALYZE&lt;/span&gt; &lt;span class="nt"&gt;diff&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Collect the geometries in every cell, simplify them a little, snap them to 3 decimal numbers, make them valid and dump them to simple features. This query takes ~300,000 ms which is orders of magnitude faster than my initial attempt.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;DROP TABLE IF EXISTS uni;
CREATE TABLE uni AS
SELECT
    g.ogc_fid AS grid_id,
    (ST_Dump(
        ST_MakeValid(
            ST_SnapToGrid(
                ST_SimplifyPreserveTopology(
                    ST_CollectionExtract(
                        ST_Buffer(
                            ST_Collect(
                                ST_Intersection(a.wkb_geometry, g.wkb_geometry)
                            )
                        , 0)
                    , 3)
                , 0.1)
            , 0.001)
        )
    )).geom as wkb_geometry
FROM diff a, grid g
WHERE ST_Intersects(a.wkb_geometry, g.wkb_geometry)
GROUP BY g.ogc_fid;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After running the query it is reasonable to check the results. I'm only interested in polygonal geometries, &lt;code&gt;ST_GeometryType()&lt;/code&gt; would tell me of any other geometry type. Invalid geometries are not allowed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SELECT DISTINCT ST_GeometryType(wkb_geometry) FROM uni;
SELECT COUNT(1) FROM uni WHERE NOT ST_IsValid(wkb_geometry);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add primary key on serial column as a last SQL step.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ALTER TABLE uni ADD COLUMN id serial;
ALTER TABLE uni ADD PRIMARY KEY(id);
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Export&lt;/h3&gt;
&lt;p&gt;And spit it out as a shapefile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ogr2ogr -f &amp;quot;ESRI Shapefile&amp;quot; output.shp PG:&amp;quot;dbname=ign user=postgres&amp;quot; uni -s_srs &amp;quot;EPSG:2154&amp;quot; -t_srs &amp;quot;EPSG:2154&amp;quot; -lco ENCODING=UTF-8
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Lesson learned&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;More of little seems to be faster than less of bigger.&lt;/li&gt;
&lt;li&gt;Never stop learning and trying different approaches.&lt;/li&gt;
&lt;li&gt;Although using &lt;code&gt;CTE&lt;/code&gt; might be tempting, creating separate tables for separate steps of the whole process is much more comfortable for debugging.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Thu, 19 Mar 2015 19:27:00 +0100</pubDate><guid>tag:www.zimmi.cz,2015-03-19:posts/2015/postgis-buffers-intersections-differences-and-collections/</guid><category>postgis</category><category>postgresql</category></item><item><title>WMS Download For Future Offline Use</title><link>http://www.zimmi.cz/posts/2015/wms-download-for-future-offline-use/</link><description>&lt;p&gt;Using WMS in real time might easily become pain in the ass due to low connection speed or slow server response. Downloading images beforehand seems to be a reasonable choice both to avoid any slowdowns and to improve user experience when working with WMS layers.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://geopython.github.io/OWSLib/"&gt;OWSLib&lt;/a&gt; is a great tool to help you get images from WMS server. Code and some comments follow.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;owslib.wms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WebMapService&lt;/span&gt;

&lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;679363&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1120688&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TOP_RIGHT&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;565171&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1042703&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;SRS_WIDTH&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;639084&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;638825&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# tile width in units of crs =&amp;gt; 259 m&lt;/span&gt;
&lt;span class="n"&gt;SRS_HEIGHT&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1070426&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1070273&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# tile height in units of crs =&amp;gt; 153 m&lt;/span&gt;
&lt;span class="n"&gt;PX_WIDTH&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;977&lt;/span&gt;
&lt;span class="n"&gt;PX_HEIGHT&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;578&lt;/span&gt;

&lt;span class="n"&gt;FORMAT&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;image/png&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;LAYERS&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;KN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;RST_PK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;SIZE&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PX_WIDTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PX_HEIGHT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;SRS&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;EPSG:5514&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STYLES&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;TRANSPARENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tiles/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SLEEP&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# seconds&lt;/span&gt;

&lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;TOP_RIGHT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c"&gt;# area width in units of crs&lt;/span&gt;
&lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;TOP_RIGHT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c"&gt;# area height in units of crs&lt;/span&gt;

&lt;span class="n"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;SRS_WIDTH&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;SRS_HEIGHT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;world_file.pngw&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wld_template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;tmpl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wld_template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;wms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebMapService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://services.cuzk.cz/wms/wms.asp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1.1.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/kn_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;

        &lt;span class="n"&gt;bbox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;SRS_WIDTH&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;SRS_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;SRS_WIDTH&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;SRS_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LAYERS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;styles&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;STYLES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;srs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SRS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;bbox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bbox&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FORMAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;transparent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRANSPARENT&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/kn_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/kn_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.pngw&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wld_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;wld_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;wld_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;SRS_WIDTH&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
            &lt;span class="n"&gt;wld_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;SRS_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;BOTTOM_LEFT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

        &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; out of &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SLEEP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, always make sure &lt;strong&gt;you are not violating terms of use&lt;/strong&gt; defined by service provider. If you are not, here are the necessary steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Define your area of interest with bottom left and top right coordinates.&lt;/li&gt;
&lt;li&gt;Calculate width of single image both in pixels and units of CRS to get the rightsized image. Note that there may be image size restrictions defined by provider (2048 &amp;times; 2048 px is usually the biggest you can get).&lt;/li&gt;
&lt;li&gt;Define template &lt;a href="https://en.wikipedia.org/wiki/World_file"&gt;world file&lt;/a&gt; for referencing images. OWSLib doesn't provide world files to saved images, these have to be created by you. I recommend to use a template file for creating real world files.&lt;/li&gt;
&lt;li&gt;Be nice! Don't overload the service. I use &lt;code&gt;time.sleep()&lt;/code&gt; for this.&lt;/li&gt;
&lt;li&gt;Profit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The trouble with WMS is that you can't set an arbitrary scale you want to obtain images in (e.g. 1:1 000). It's fairly easy to get all values needed to imitate this behavior though.&lt;/p&gt;
&lt;p&gt;Using &lt;a href="http://qgis.org"&gt;QGIS&lt;/a&gt; you can:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get bounding box of area you're interested in.&lt;/li&gt;
&lt;li&gt;Save current view as an image (together with the world file!) and use it as a specimen for your own world files.&lt;/li&gt;
&lt;li&gt;Derive image width (CRS, pixels) from the saved image, thus getting the same zoom level you were using in QGIS.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Code given is not bulletproof, it will fail on any network error. However, if you restart it after such a crash, it checks for existing files and starts with the first missing, so you don't have to download all the tiles again.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 15 Mar 2015 18:10:00 +0100</pubDate><guid>tag:www.zimmi.cz,2015-03-15:posts/2015/wms-download-for-future-offline-use/</guid><category>ogc</category><category>python</category><category>wms</category></item><item><title>Hosting Website On Openshift</title><link>http://www.zimmi.cz/posts/2015/hosting-website-on-openshift/</link><description>&lt;p&gt;I decided to migrate &lt;a href="http://www.zimmi.cz"&gt;my web&lt;/a&gt; to &lt;a href="http://openshift.com"&gt;OpenShift&lt;/a&gt;. It was a bit frustrating but I got it working eventually.&lt;/p&gt;
&lt;h2&gt;Things to know before taking the leap&lt;/h2&gt;
&lt;p&gt;Some domain providers don't support CNAME changes for root domains (zimmi.cz in my case). This means you can't simply tell your domain to serve content from OpenShift address. But what you can do is to tell your &lt;code&gt;www&lt;/code&gt; subdomain to do so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;www.zimmi.cz CNAME hp-zimmi.rhcloud.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which is great until you realize you've just created two different websites. That's where &lt;a href="http://wwwizer.com/"&gt;wwwizer&lt;/a&gt; lends you a hand and lets you redirect your naked domain to your &lt;code&gt;www&lt;/code&gt; domain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;zimmi.cz A 174.129.25.170
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now everything works fine and you have your &lt;code&gt;www.domain.tld&lt;/code&gt; up and running.&lt;/p&gt;
&lt;h2&gt;OpenShift subdomains&lt;/h2&gt;
&lt;p&gt;I wasn't successful creating a subdomain on the same application where I run my domain. This can be easily solved by creating another application and pointing DNS to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;posts.zimmi.cz A 174.179.25.170
www.posts.zimmi.cz CNAME posts-zimmi.rhcloud.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just don't forget to handle both naked and &lt;code&gt;www&lt;/code&gt; version. When Google reindexes new URLs (http://www.zimmi.cz/posts instead of http://posts.zimmi.cz) subdomain application might be deleted.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Mon, 23 Feb 2015 14:25:00 +0100</pubDate><guid>tag:www.zimmi.cz,2015-02-23:posts/2015/hosting-website-on-openshift/</guid><category>openshift</category></item><item><title>PostGIS Case Study: Vozejkmap Open Data (Part II)</title><link>http://www.zimmi.cz/posts/2015/postgis-case-study-vozejkmap-open-data-part-ii/</link><description>&lt;p&gt;&lt;a href="{{ pcposturl(2014, 12, 02, 'postgis-case-study-vozejkmap-open-data-part-i') }}"&gt;In the first part of my little case study&lt;/a&gt; I downloaded &lt;a href="http://vozejkmap.cz"&gt;vozejkmap.cz&lt;/a&gt; dataset and imported it into the PostGIS database. Having spatial data safely stored the time comes to get it onto the map. Libraries used are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://leafletjs.com"&gt;Leaflet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lvoogdt/Leaflet.awesome-markers"&gt;Leaflet.awesome-markers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Leaflet/Leaflet.markercluster"&gt;Leaflet.markercluster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I teach cartography visualization classes this semester and this map should serve well as an example of what can be done with online maps.&lt;/p&gt;
&lt;h2&gt;Retrieving data from the PostGIS database&lt;/h2&gt;
&lt;p&gt;Our goal is to build the whole map as a static HTML page without any backend logic. Thus, data needs to be extracted from the database into the format readable with Leaflet - &lt;a href="http://geojson.org/"&gt;GeoJSON&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That's fairly easy with the &lt;a href="http://www.postgresonline.com/journal/archives/267-Creating-GeoJSON-Feature-Collections-with-JSON-and-PostGIS-functions.html"&gt;postgresonline.com tutorial&lt;/a&gt;. It took me quite a time to find out what the following query does. Splitting it into smaller chunks helped a lot.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SELECT row_to_json(fc)
FROM (
SELECT &amp;#39;FeatureCollection&amp;#39; AS type,
    array_to_json(array_agg(f)) AS features
    FROM (SELECT &amp;#39;Feature&amp;#39; AS type,
        ST_AsGeoJSON(lg.geom)::json As geometry,
        row_to_json((SELECT l FROM (SELECT id, title, location_type, description, author_name, attr1, attr2, attr3) AS l
  )) AS properties
FROM vozejkmap AS lg ) AS f )  AS fc \g /path/to/file.json;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To get all rows with &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;geometry&lt;/code&gt; and &lt;code&gt;properties&lt;/code&gt; columns (these are the ones defined in GeoJSON specification, see the link above), run this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SELECT &amp;#39;Feature&amp;#39; AS type,
            ST_AsGeoJSON(lg.geom)::json As geometry,
            row_to_json((SELECT l FROM (SELECT id, title, location_type, description, author_name, attr1, attr2, attr3) AS l
      )) AS properties
    FROM vozejkmap AS lg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;array_agg()&lt;/code&gt; squashes all the rows into an array while &lt;code&gt;array_to_json()&lt;/code&gt; returns the array as JSON.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SELECT &amp;#39;FeatureCollection&amp;#39; AS type,
    array_to_json(array_agg(f)) AS features
    FROM (SELECT &amp;#39;Feature&amp;#39; AS type,
        ST_AsGeoJSON(lg.geom)::json As geometry,
        row_to_json((SELECT l FROM (SELECT id, title, location_type, description, author_name, attr1, attr2, attr3) AS l
  )) AS properties
FROM vozejkmap AS lg ) AS f
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the last step (the whole code as shown above) &lt;code&gt;row_to_json&lt;/code&gt; returns the result as JSON.&lt;/p&gt;
&lt;h3&gt;Caveats&lt;/h3&gt;
&lt;p&gt;If you run this code from the psql console, be sure you&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set &lt;em&gt;show only row&lt;/em&gt; to true with &lt;code&gt;\t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set &lt;em&gt;expanded output&lt;/em&gt; to false with &lt;code&gt;\x off&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you don't, you'll have lots of hyphens and column names saved to the json file.&lt;/p&gt;
&lt;h2&gt;Leaflet map&lt;/h2&gt;
&lt;p&gt;Map JavaScript is rather simple with ~30 lines of code (not taking styles into account). Thanks to the great plugins it is easy to show ~7,600 points on the map real quick.&lt;/p&gt;
&lt;p&gt;I didn't do much customization apart from styling markers and binding popups.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://www.zimmi.cz/posts/assets/postgis-case-study-vozejkmap-open-data-part-ii/map.png" title="vozejkmap.cz data map" class="img-responsive centered"&gt;&lt;/p&gt;
&lt;h2&gt;What's next&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://turfjs.org"&gt;Turf&lt;/a&gt; which means I need to think of what could be fun to do with this data&lt;/li&gt;
&lt;li&gt;Layers switching&lt;/li&gt;
&lt;li&gt;Map key (by extending L.Control)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The code is still &lt;a href="https://github.com/zimmicz/vozejkmap-to-postgis"&gt;available at my GitHub&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sat, 21 Feb 2015 20:54:00 +0100</pubDate><guid>tag:www.zimmi.cz,2015-02-21:posts/2015/postgis-case-study-vozejkmap-open-data-part-ii/</guid><category>postgresql</category><category>postgis</category></item><item><title>Using PostgreSQL To Update Outdated Map Links</title><link>http://www.zimmi.cz/posts/2015/using-postgresql-to-update-outdated-map-links/</link><description>&lt;p&gt;&lt;a href="http://www.edpp.cz/pdb_mapa-povodnoveho-planu-mesta/"&gt;We've rolled out&lt;/a&gt; completely new map GUI at &lt;a href="http://edpp.cz"&gt;edpp.cz&lt;/a&gt; built on top of &lt;a href="http://ol3js.org"&gt;OpenLayers 3&lt;/a&gt;. It looks great and has lots of functions both for BFU and power users. The only pitfall that came with moving away from OpenLayers 2 were remarkable differences in zoom levels between the old map and the new one.&lt;/p&gt;
&lt;p&gt;Each of our maps is defined by our admins (center, zoom level, layers) at the map creation. Lots of links calling different views of map are created as well. They take form of &lt;code&gt;http://edpp.cz/some-map?0=0&amp;amp;1=0...zoom=5&lt;/code&gt;. That &lt;code&gt;zoom=&amp;lt;Number&amp;gt;&lt;/code&gt; started causing troubles immediately after the map switch. No way my workmates would update them one by one as there were ~4,500 of them. Sounds like a task for little bit of regular expressions and some SQL updates.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;UPDATE table
    SET column = regexp_replace(column, &amp;#39;zoom=\d&amp;#39;, &amp;#39;zoom=&amp;#39; || subquery.zoom, &amp;#39;g&amp;#39;)
    FROM (
        SELECT regexp_replace(
            substring(column from &amp;#39;zoom=\d&amp;#39;),
            &amp;#39;zoom=(\d)&amp;#39;,
            &amp;#39;\1&amp;#39;,
            &amp;#39;g&amp;#39;)::integer + 2 AS zoom, guid
        FROM table) AS subquery
    WHERE column ~ &amp;#39;zoom=\d&amp;#39;
        AND table.guid = subquery.guid
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's what I've come up with. It basically extracts the zoom level from the link, adds number two to its value and writes it back to the string.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Mon, 16 Feb 2015 18:38:00 +0100</pubDate><guid>tag:www.zimmi.cz,2015-02-16:posts/2015/using-postgresql-to-update-outdated-map-links/</guid><category>postgresql</category><category>regex</category></item><item><title>Leaflet With Custom CRS (EPSG:5514)</title><link>http://www.zimmi.cz/posts/2015/leaflet-with-custom-crs-epsg5514/</link><description>&lt;p&gt;If you ever find yourself in need to use custom projection with Leaflet, feel free to start with this example of &lt;a href="https://github.com/zimmicz/leaflet-custom-crs-jtsk"&gt;Czech national coordinate system&lt;/a&gt;. All you need is &lt;a href="http://leafletjs.com"&gt;Leaflet&lt;/a&gt;, &lt;a href="http://proj4js.org/"&gt;proj4.js&lt;/a&gt; and &lt;a href="https://github.com/kartena/Proj4Leaflet"&gt;proj4 for Leaflet plugin&lt;/a&gt;. I'm still not sure how &lt;code&gt;origin&lt;/code&gt; coordinates work though.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Thu, 15 Jan 2015 19:46:00 +0100</pubDate><guid>tag:www.zimmi.cz,2015-01-15:posts/2015/leaflet-with-custom-crs-epsg5514/</guid><category>javascript</category><category>leaflet</category></item><item><title>PostGIS Case Study: VozejkMap Open Data (Part I)</title><link>http://www.zimmi.cz/posts/2014/postgis-case-study-vozejkmap-open-data-part-i/</link><description>&lt;p&gt;&lt;a href="http://www.vozejkmap.cz"&gt;VozejkMap.cz&lt;/a&gt; is a Czech &lt;strong&gt;open data&lt;/strong&gt; iniatitive that collects data about wheelchair accessible places, e.g. pubs, toilets, cafes etc. As part of being open, they offer a &lt;a href="http://www.vozejkmap.cz/opendata/"&gt;JSON data download&lt;/a&gt;. JSON is a great text format, not so great spatial format (leaving GeoJSON aside) though. Anyway, nothing that &lt;a href="http://posts.zimmi.cz/tag/postgis/"&gt;PostGIS&lt;/a&gt; wouldn't be able to take care of.&lt;/p&gt;
&lt;h3&gt;Let's get some data&lt;/h3&gt;
&lt;p&gt;Using curl or wget, let's download the JSON file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget -O /tmp/locations.json http://www.vozejkmap.cz/opendata/locations.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to split them into rows to load each point into one row:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sed -i &amp;#39;s/\},{/\n},{/g&amp;#39; /tmp/locations.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you peep into the file, you'll see lots of unicode characters we don't want to have in our pretty little table. Here's how we get rid of them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;echo -en &amp;quot;$(cat /tmp/locations.json)&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Let's load the data&lt;/h3&gt;
&lt;p&gt;Let's just be nice and leave the public schema clean.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;CREATE SCHEMA vozejkmap;
SET search_path=vozejkmap, public;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Load the data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;CREATE TABLE vozejkmap_raw(id SERIAL PRIMARY KEY, raw text);
COPY vozejkmap_raw(raw) FROM &amp;#39;/tmp/locations.json&amp;#39; DELIMITERS &amp;#39;#&amp;#39; ESCAPE &amp;#39;\&amp;#39; CSV;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A few notes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I'm using &lt;code&gt;/tmp&lt;/code&gt; folder to avoid any permission-denied issues when opening the file from &lt;code&gt;psql&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;By setting &lt;code&gt;DELIMITERS&lt;/code&gt; to &lt;code&gt;#&lt;/code&gt; we tell PostgreSQL to load whole data into one column, because it is safe to assume there is no such character in our data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ESCAPE&lt;/code&gt; needs to be set because there is one trailing quote in the dataset.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Let's get dirty with spatial data&lt;/h3&gt;
&lt;p&gt;Great, now what? We loaded all the data into one column. That is not very useful, is it? How about splitting them into separate columns with this query? Shall we call it a &lt;code&gt;split_part&lt;/code&gt; hell?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;CREATE TABLE vozejkmap AS
SELECT
    id,
    trim(
        split_part(
            split_part(
                raw, &amp;#39;title:&amp;#39;, 2
            ),
            &amp;#39;,location_type:&amp;#39;, 1
        )
    ) AS title,

    trim(
        split_part(
            split_part(
                raw, &amp;#39;location_type:&amp;#39;, 2
            ),
            &amp;#39;,description:&amp;#39;, 1
        )
    )::integer AS location_type,

    trim(
        split_part(
            split_part(
                raw, &amp;#39;description:&amp;#39;, 2
            ),
            &amp;#39;,lat:&amp;#39;, 1
        )
    ) AS description,

    cast( trim(
        split_part(
            split_part(
                raw, &amp;#39;lat:&amp;#39;, 2
            ),
            &amp;#39;,lng:&amp;#39;, 1
        )
    ) AS double precision) AS lat,

    cast( trim(
        split_part(
            split_part(
                raw, &amp;#39;lng:&amp;#39;, 2
            ),
            &amp;#39;,attr1:&amp;#39;, 1
        )
    )  AS double precision) AS lng,

    trim(
        split_part(
            split_part(
                raw, &amp;#39;attr1:&amp;#39;, 2
            ),
            &amp;#39;,attr2:&amp;#39;, 1
        )
    )::integer AS attr1,

    trim(
        split_part(
            split_part(
                raw, &amp;#39;attr2:&amp;#39;, 2
            ),
            &amp;#39;,attr3:&amp;#39;, 1
        )
    ) AS attr2,

    trim(
        split_part(
            split_part(
                raw, &amp;#39;attr3:&amp;#39;, 2
            ),
            &amp;#39;,author_name:&amp;#39;, 1
        )
    ) AS attr3,

    trim(
        split_part(
            split_part(
                raw, &amp;#39;author_name:&amp;#39;, 2
            ),
            &amp;#39;,}:&amp;#39;, 1
        )
    ) AS author_name

FROM vozejkmap_raw;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It just splits the JSON data and creates table out of it according to the &lt;a href="http://www.vozejkmap.cz/opendata/"&gt;VozejkMap.cz data specification&lt;/a&gt;. Before going on we should create a table with location types to join their numeric codes to real names:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;CREATE TABLE location_type (
    id integer PRIMARY KEY,
    description varchar(255)
);

INSERT INTO location_type VALUES(1, &amp;#39;Kultura&amp;#39;);
INSERT INTO location_type VALUES(2, &amp;#39;Sport&amp;#39;);
INSERT INTO location_type VALUES(3, &amp;#39;Instituce&amp;#39;);
INSERT INTO location_type VALUES(4, &amp;#39;Jídlo a pití&amp;#39;);
INSERT INTO location_type VALUES(5, &amp;#39;Ubytování&amp;#39;);
INSERT INTO location_type VALUES(6, &amp;#39;Lékaři, lékárny&amp;#39;);
INSERT INTO location_type VALUES(7, &amp;#39;Jiné&amp;#39;);
INSERT INTO location_type VALUES(8, &amp;#39;Doprava&amp;#39;);
INSERT INTO location_type VALUES(9, &amp;#39;Veřejné WC&amp;#39;);
INSERT INTO location_type VALUES(10, &amp;#39;Benzínka&amp;#39;);
INSERT INTO location_type VALUES(11, &amp;#39;Obchod&amp;#39;);
INSERT INTO location_type VALUES(12, &amp;#39;Banka, bankomat&amp;#39;);
INSERT INTO location_type VALUES(13, &amp;#39;Parkoviště&amp;#39;);
INSERT INTO location_type VALUES(14, &amp;#39;Prodejní a servisní místa Škoda Auto&amp;#39;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's build some geometry column, constraints and indexes. And don't forget to get rid of all the mess (the &lt;code&gt;vozejkmap_raw&lt;/code&gt; table).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;DROP TABLE vozejkmap_raw;
ALTER TABLE vozejkmap ADD PRIMARY KEY(id);
-- 4326 geometry is not very useful for measurements, I might get to that next time
ALTER TABLE vozejkmap ADD COLUMN geom geometry(point, 4326);
ALTER TABLE vozejkmap ADD CONSTRAINT loctype_fk FOREIGN KEY(location_type); REFERENCES location_type(id);

UPDATE vozejkmap SET geom = ST_SetSRID(ST_MakePoint(lng, lat), 4326);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;And here we are, ready to use our spatial data!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Feel free to &lt;a href="https://github.com/zimmicz/vozejkmap-to-postgis"&gt;grab the code&lt;/a&gt; at GitHub.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 02 Dec 2014 17:59:00 +0100</pubDate><guid>tag:www.zimmi.cz,2014-12-02:posts/2014/postgis-case-study-vozejkmap-open-data-part-i/</guid><category>postgresql</category><category>postgis</category></item><item><title>PostGIS Spatial Indexing With ST_Intersects</title><link>http://www.zimmi.cz/posts/2014/postgis-spatial-indexing-with-st_intersects/</link><description>&lt;p&gt;&lt;a href="http://postgis.net/docs/ST_Intersects.html"&gt;PostGIS docs&lt;/a&gt; clearly states that:
    &amp;gt; This function call will automatically include a bounding box comparison that will make use of any indexes that are available on the geometries.&lt;/p&gt;
&lt;p&gt;That means (or at least I think so) that you shouldn't bother with using &lt;a href="http://postgis.net/docs/reference.html#Operators"&gt;operators&lt;/a&gt; before calling this function.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://slides.com/michalzimmermann"&gt;I was preparing&lt;/a&gt; my second lecture on PostGIS and I was experimenting a bit and came up with an interesting thing on this matter:&lt;/p&gt;
&lt;p&gt;Let's have two SQL relations, &lt;code&gt;roads&lt;/code&gt; and &lt;code&gt;regions&lt;/code&gt;. I would like to retrieve every road that intersects a certain region. Spatial indexes were built beforehand on both tables.&lt;/p&gt;
&lt;p&gt;First try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;EXPLAIN ANALYZE SELECT roads.* FROM roads
JOIN regions ON ST_Intersects(roads.geom, regions.geom)
WHERE regions.&amp;quot;NAZEV&amp;quot; = &amp;#39;Jihomoravský&amp;#39;;`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here comes the result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Nested Loop  (cost=4.85..324.26 rows=249 width=214) (actual time=45.102..5101.472 rows=74253 loops=1)
-&amp;gt;  Seq Scan on regions  (cost=0.00..12.62 rows=1 width=32) (actual time=0.015..0.018 rows=1 loops=1)
     Filter: ((&amp;quot;NAZEV&amp;quot;)::text = &amp;#39;Jihomoravský&amp;#39;::text)
     Rows Removed by Filter: 13
-&amp;gt;  Bitmap Heap Scan on roads  (cost=4.85..311.38 rows=25 width=214) (actual time=45.079..4931.495 rows=74253 loops=1)
     Recheck Cond: (geom &amp;amp;&amp;amp; regions.geom)
     Rows Removed by Index Recheck: 154841
     Filter: _st_intersects(geom, regions.geom)
     Rows Removed by Filter: 71212
     -&amp;gt;  Bitmap Index Scan on roads_idx  (cost=0.00..4.85 rows=75 width=0) (actual time=40.142..40.142 rows=145465 loops=1)
           Index Cond: (geom &amp;amp;&amp;amp; regions.geom)
Total runtime: 5181.459 ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I was pretty satisfied with the result, I kept digging deeper though.&lt;/p&gt;
&lt;p&gt;Second try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;EXPLAIN ANALYZE SELECT roads.* FROM roads
JOIN regions ON roads.geom &amp;amp;&amp;amp; regions.geom
WHERE regions.&amp;quot;NAZEV&amp;quot; = &amp;#39;Jihomoravský&amp;#39; AND ST_Intersects(roads.geom, regions.geom);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Nested Loop  (cost=0.29..21.19 rows=1 width=214) (actual time=3.041..3850.302 rows=74253 loops=1)
-&amp;gt;  Seq Scan on regions  (cost=0.00..12.62 rows=1 width=32) (actual time=0.021..0.024 rows=1 loops=1)
     Filter: ((&amp;quot;NAZEV&amp;quot;)::text = &amp;#39;Jihomoravský&amp;#39;::text)
     Rows Removed by Filter: 13
-&amp;gt;  Index Scan using roads_idx on roads  (cost=0.29..8.55 rows=1 width=214) (actual time=2.938..3681.432 rows=74253 loops=1)
     Index Cond: ((geom &amp;amp;&amp;amp; regions.geom) AND (geom &amp;amp;&amp;amp; regions.geom))
     Filter: _st_intersects(geom, regions.geom)
     Rows Removed by Filter: 71212
Total runtime: 3930.270 ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now there's a significant difference between total runtimes of both queries and - more important - also a difference between their query plans. The latter is like &lt;strong&gt;20 % faster&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I'm puzzled about this behavior and would appreciate any thoughts on this. Reach me at &lt;a href="http://twitter.com/zimmicz"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/pub/michal-zimmermann/29/8/b30"&gt;LinkedIn&lt;/a&gt; or e-mail (zimmicz[at]gmail.com).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 23 Nov 2014 10:05:00 +0100</pubDate><guid>tag:www.zimmi.cz,2014-11-23:posts/2014/postgis-spatial-indexing-with-st_intersects/</guid><category>postgis</category></item><item><title>Bash: Prepend To Filename</title><link>http://www.zimmi.cz/posts/2014/bash-prepend-to-filename/</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;for f in *; do mv &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; &amp;quot;prepend_&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;; done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whenever you need to prepend anything to your files.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sat, 01 Nov 2014 13:11:00 +0100</pubDate><guid>tag:www.zimmi.cz,2014-11-01:posts/2014/bash-prepend-to-filename/</guid><category>linux</category><category>bash</category></item><item><title>Migrating Geoserver And Checking For Missing Data</title><link>http://www.zimmi.cz/posts/2014/migrating-geoserver-and-checking-for-missing-data/</link><description>&lt;p&gt;I've upgraded a handful of Geoserver installations and it has never been flawless. If you're lucky you end up with just &lt;em&gt;some&lt;/em&gt; layers missing, if you're not, you'll miss a bunch of them (together with layergroups, some stores, workspaces might screw up etc.).&lt;/p&gt;
&lt;p&gt;But how do you check for missing data before switching to the newer version? Thanks to the &lt;a href="http://docs.geoserver.org/stable/en/user/rest/api/index.html"&gt;REST API implemented within Geoserver&lt;/a&gt;, it's rather easy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;requests.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPBasicAuth&lt;/span&gt;

&lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://example.com/geoserver/rest/layers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;HTTPBasicAuth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;list.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We needed to migrate ~ 17,000 layers last week, and yes, we could have just shut the door and spend couple of nights checking one after another, if we were the dumbest GIS company ever.&lt;/p&gt;
&lt;p&gt;As I wanted to make it a bit easier I wrote the simple Python script (see above) that just authenticates against Geoserver and downloads the list of layers. I actually had to do that twice - both old and new instance. A &lt;a href="https://www.diffchecker.com/"&gt;simple file comparison&lt;/a&gt; followed and I got a list of missing layers in less than two minutes.&lt;/p&gt;
&lt;p&gt;If you do the same to workspaces, stores and layergroups, your chances of not losing some data after the switch are pretty high.&lt;/p&gt;
&lt;p&gt;I guess it's reasonable to check your maps by hand as well, but this gives you the picture of the current state of your data real quick.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Wed, 29 Oct 2014 16:25:00 +0100</pubDate><guid>tag:www.zimmi.cz,2014-10-29:posts/2014/migrating-geoserver-and-checking-for-missing-data/</guid><category>geoserver</category><category>python</category></item><item><title>ogr2ogr UNIX x Windows</title><link>http://www.zimmi.cz/posts/2014/ogr2ogr-unix-x-windows/</link><description>&lt;p&gt;GDAL with its ogr2ogr, ogrinfo and many more is one of the best open source tools to do anything to your spatial data. It is a&amp;nbsp;command line tool, which sort of determines it to be used with UNIX systems, but you might bump into a Windows guy trying to use it as well once in a while.&lt;/p&gt;
&lt;p&gt;Be careful, it behaves differently on different OS. Let's say you do something like this on UNIX:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ogr2ogr -f GeoJSON -where &amp;quot;attribute IN (&amp;#39;value1&amp;#39;, &amp;#39;value2&amp;#39;)&amp;quot; output.json input.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What you &lt;abbr title="But you might get expected result as well"&gt;might get is a big nothing&lt;/abbr&gt;. Executed on Windows it gives you the result you've expected. &lt;em&gt;Aargh&lt;/em&gt;, what is that supposed to mean?&lt;/p&gt;
&lt;p&gt;Well, that's the ogr2ogr's way to tell you: &lt;em&gt;Hello there, you need to switch single quotes for double quotes and vice versa, you dumb!&lt;/em&gt; I don't know why and I find it really annoying. Just in case you get stuck with ogr2ogr (or probably any other command line tool), try this.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 23 Sep 2014 20:03:00 +0200</pubDate><guid>tag:www.zimmi.cz,2014-09-23:posts/2014/ogr2ogr-unix-x-windows/</guid><category>spatial</category><category>linux</category></item><item><title>Notify When Average of 10 Subsequent Numbers Is Bigger Than Given Value</title><link>http://www.zimmi.cz/posts/2014/notify-when-average-of-10-subsequent-numbers-is-bigger-than-given-value/</link><description>&lt;p&gt;I found an &lt;a href="http://stackoverflow.com/questions/25952380/php-find-a-maximum-average-for-10-subsequent-numbers-in-a-list-of-50-random-numb"&gt;interesting question&lt;/a&gt; at StackOverflow asking for help finding solution to what I have already mentioned in the title, with PHP. I gave it a try before reading answers and came up with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;avg&lt;/span&gt;&lt;span class="x"&gt;  = // value we are looking for&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="x"&gt; = count(&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;numbers&lt;/span&gt;&lt;span class="x"&gt;);&lt;/span&gt;

&lt;span class="x"&gt;for (&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="x"&gt; = 0; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="x"&gt; &amp;lt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="x"&gt;; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="x"&gt; += 1) &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    if (&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="x"&gt; + 9 &amp;lt; 51) &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;val&lt;/span&gt;&lt;span class="x"&gt; += &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;numbers&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="x"&gt;];&lt;/span&gt;
&lt;span class="x"&gt;        for (&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="x"&gt; = &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="x"&gt; + 1; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="x"&gt; &amp;lt; 10 + &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="x"&gt;; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="x"&gt; += 1) &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;            &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;val&lt;/span&gt;&lt;span class="x"&gt; += &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;numbers&lt;/span&gt;&lt;span class="x"&gt;[&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="x"&gt;];&lt;/span&gt;
&lt;span class="x"&gt;        }&lt;/span&gt;
&lt;span class="x"&gt;        if (&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;val&lt;/span&gt;&lt;span class="x"&gt; / 10 &amp;gt;= &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;avg&lt;/span&gt;&lt;span class="x"&gt;) &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt; // hit&lt;/span&gt;
&lt;span class="x"&gt;            // do something&lt;/span&gt;
&lt;span class="x"&gt;        }&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;val&lt;/span&gt;&lt;span class="x"&gt; = 0;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That was the first that I could think of. And it worked. The answer given by Dave Chen was much more elegant than my solution (although I think it does something a bit different, but that's not the point here):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="x"&gt; = 10; //numbers in a set&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="x"&gt; = 0;&lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;index&lt;/span&gt;&lt;span class="x"&gt; = 0;&lt;/span&gt;

&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="x"&gt; = sizeof(&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;numbers&lt;/span&gt;&lt;span class="x"&gt;) - &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;for (&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="x"&gt; = 0; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="x"&gt; &amp;lt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="x"&gt;; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="x"&gt;++) &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;tmp&lt;/span&gt;&lt;span class="x"&gt; = array_sum(array_slice(&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;numbers&lt;/span&gt;&lt;span class="x"&gt;, &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="x"&gt;, &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="x"&gt;)) / &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;    if (&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;tmp&lt;/span&gt;&lt;span class="x"&gt; &amp;gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="x"&gt;) &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="x"&gt; = &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;tmp&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;index&lt;/span&gt;&lt;span class="x"&gt; = &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I made a simple benchmark with &lt;a href="http://php.net/manual/en/function.microtime.php"&gt;&lt;code&gt;microtime()&lt;/code&gt;&lt;/a&gt; and found out that my solution (ran 100k times) took about ~12.3 seconds while Dave's took only ~7.4 seconds to finish. That makes his code almost twice faster than mine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson learned: do not stop learning!&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 21 Sep 2014 17:38:00 +0200</pubDate><guid>tag:www.zimmi.cz,2014-09-21:posts/2014/notify-when-average-of-10-subsequent-numbers-is-bigger-than-given-value/</guid><category>php</category></item><item><title>PostgreSQL Remote Access</title><link>http://www.zimmi.cz/posts/2014/postgresql-remote-access/</link><description>&lt;p&gt;PostgreSQL is set to listen only to connections coming from localhost by default. I guess that's fine as far as you don't need access to the database from anywhere else (like your work network). If you do, you need to log via SSH or use some online database management tool (go for &lt;a href="http://adminer.org"&gt;Adminer&lt;/a&gt; and forget about anything called php[pg|my]admin). Or you can set it up to access connections from other locations.&lt;/p&gt;
&lt;p&gt;You need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;set &lt;code&gt;listen_addresses&lt;/code&gt; to &lt;code&gt;*&lt;/code&gt; in your postgres.conf. That does not mean anyone can connect to your database, that means that the server will listen to connections coming from any available IP interface.&lt;/li&gt;
&lt;li&gt;insert new entry into pg_hba.conf looking like this: &lt;code&gt;host database user xxx.xxx.xxx.xxx md5&lt;/code&gt;. Now we're saying we only want connections coming from IP &lt;code&gt;xxx.xxx.xxx.xxx&lt;/code&gt; accepted.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add rule allowing the database server access to iptables. Number 5 says it will be the fifth rule in the order. It must come before the final REJECT ALL rule if present.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iptables -I INPUT 5 -p tcp --dport 5432 -s xxx.xxx.xxx.xxx -j ACCEPT&lt;/code&gt;
4. Just to be sure noone else is able to connect, reject all on port 5432.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iptables -I INPUT 6 -p tcp --dport 5432 -j REJECT&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You're set to remotely connect to your database server.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Wed, 17 Sep 2014 17:04:00 +0200</pubDate><guid>tag:www.zimmi.cz,2014-09-17:posts/2014/postgresql-remote-access/</guid><category>postgresql</category><category>linux</category></item><item><title>Switch Latitude And Longitude With Regular Expression</title><link>http://www.zimmi.cz/posts/2014/switch-latitude-and-longitude-with-regular-expression/</link><description>&lt;p&gt;It happens that you receive a file with longitude and latitude just in the opposite order that you would like to have. It's fairly easy to switch those without loading it into Excel or Calc and doing &lt;code&gt;Ctrl + C&lt;/code&gt; and &lt;code&gt;Ctrl + V&lt;/code&gt; on columns.&lt;/p&gt;
&lt;p&gt;If you have a file with tabular data that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; 50.52, 60.15
 70.96, 80.1
-55.23, 62.03
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can use Sublime Text to switch the values:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl + H&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;(\-?\d+\.?\d+),?[\t ]*(\-?\d+\.?\d+)$&lt;/code&gt; to &lt;em&gt;Find What&lt;/em&gt; input&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;$2,$1&lt;/code&gt; to &lt;em&gt;Replace With&lt;/em&gt; input&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hit &lt;em&gt;Replace All&lt;/em&gt; button and you're done.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Sun, 14 Sep 2014 17:21:00 +0200</pubDate><guid>tag:www.zimmi.cz,2014-09-14:posts/2014/switch-latitude-and-longitude-with-regular-expression/</guid><category>sublime</category><category>regex</category></item><item><title>Connecting To Secured ArcGIS Server Layer With OpenLayers 3</title><link>http://www.zimmi.cz/posts/2014/connecting-to-secured-arcgis-server-layer-with-openlayers-3/</link><description>&lt;p&gt;I was made to use ArcGIS Server with &lt;a href="http://openlayers.org"&gt;Openlayers 3&lt;/a&gt; just recently as one of the projects I've been working on demands such different tools to work together.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tl;dr: I hate Esri.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I found myself in need to access secured layers published via WMS on ArcGIS Server using username and password I was given, so here's a little how-to for anyone who would have to do the same.&lt;/p&gt;
&lt;p&gt;Let's start with a simple ol.layer.Image and pretend this is the secured layer we're looking for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;var layer = new ol.layer.Image({
    extent: extent,
    source: new ol.source.ImageWMS(/** @type {olx.source.ImageWMSOptions} */ ({
        url: url,
        params: {
            &amp;#39;LAYERS&amp;#39;: &amp;#39;layer&amp;#39;,
            &amp;#39;CRS&amp;#39;: &amp;#39;EPSG:3857&amp;#39;,
        }
    }))
});
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to retrieve the token, so we define a function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;retrieveToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// response contents is where the token is stored&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://server.address/arcgis/tokens/?request=getToken&amp;amp;username=username&amp;amp;password=password&amp;amp;expiration=60&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I pass a parameter called &lt;code&gt;callback&lt;/code&gt; - that's a very important step, otherwise you would not be able to retrieve the token when you actually need it (AJAX stands for asynchronous). Now you just pass the token to the layer params like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;retrieveToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSource&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;updateParams&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you open Firebug and inspect Network tab, you should find &lt;code&gt;token&lt;/code&gt; URL parameter passed along with WMS &lt;code&gt;GetMap&lt;/code&gt; request.&lt;/p&gt;
&lt;p&gt;Few sidenotes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Although you might be logged in ArcGIS Server via web interface, you might need to pass the &lt;code&gt;token&lt;/code&gt;  URL param when trying to access Capabilities document. Don't know why though.&lt;/li&gt;
&lt;li&gt;You should probably take care of calling the &lt;code&gt;retrieveToken()&lt;/code&gt; in shorter interval than the token expiration is set to. Otherwise you might end up with invalid token.&lt;/li&gt;
&lt;li&gt;You need to hide the username and password from anonymous users (I guess that's only possible with server side implementation of selective JavaScript loading).&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Fri, 12 Sep 2014 18:03:00 +0200</pubDate><guid>tag:www.zimmi.cz,2014-09-12:posts/2014/connecting-to-secured-arcgis-server-layer-with-openlayers-3/</guid><category>javascript</category><category>openlayers</category><category>ogc</category></item><item><title>Blogging On Docker: Piecrust To The Rescue</title><link>http://www.zimmi.cz/posts/2014/blogging-on-docker-piecrust-to-the-rescue/</link><description>&lt;p&gt;I love blogging. I hate blogging systems. I hate content management systems. I just want to blog. That's what &lt;a href="http://bolt80.com/piecrust/"&gt;PieCrust&lt;/a&gt; is all about - it lets you blog.&lt;/p&gt;
&lt;p&gt;It is powerful static website generator perfect for my needs (and for yours as well?). Blogging with PieCrust is really a piece of cake:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;prepare post&lt;/li&gt;
&lt;li&gt;serve site&lt;/li&gt;
&lt;li&gt;bake site&lt;/li&gt;
&lt;li&gt;send it off to the public&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I love having clean OS. That's what &lt;a href="http://docker.com"&gt;Docker&lt;/a&gt; is all about - for me. Running PieCrust on Docker is really easy, it does not clutter your PC and it just works.&lt;/p&gt;
&lt;p&gt;If you ever want to use PieCrust on Docker, why don't you start with this code?
    FROM centos:centos6&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;rpm&lt;/span&gt; &lt;span class="nt"&gt;-Uvh&lt;/span&gt; &lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;mirror&lt;/span&gt;&lt;span class="nc"&gt;.webtatic.com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;yum&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;el6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;latest&lt;/span&gt;&lt;span class="nc"&gt;.rpm&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;rpm&lt;/span&gt; &lt;span class="nt"&gt;-Uvh&lt;/span&gt; &lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;download&lt;/span&gt;&lt;span class="nc"&gt;.fedoraproject.org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;pub&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;epel&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;epel-release-6-8&lt;/span&gt;&lt;span class="nc"&gt;.noarch.rpm&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;rpm&lt;/span&gt; &lt;span class="nt"&gt;-Uvh&lt;/span&gt; &lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;rpms&lt;/span&gt;&lt;span class="nc"&gt;.famillecollet.com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;enterprise&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;remi-release-6&lt;/span&gt;&lt;span class="nc"&gt;.rpm&lt;/span&gt;

&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;yum&lt;/span&gt; &lt;span class="nt"&gt;--enablerepo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;remi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;remi-php55&lt;/span&gt; &lt;span class="nt"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;php&lt;/span&gt; &lt;span class="nt"&gt;php-mbstring&lt;/span&gt; &lt;span class="nt"&gt;php-opcache&lt;/span&gt; &lt;span class="nt"&gt;php-cli&lt;/span&gt; &lt;span class="nt"&gt;php-pear&lt;/span&gt; &lt;span class="nt"&gt;php-common&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nt"&gt;yum&lt;/span&gt; &lt;span class="nt"&gt;clean&lt;/span&gt; &lt;span class="nt"&gt;all&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;php&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;readfile(&amp;#39;https://getcomposer.org/installer&amp;#39;);&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;php&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;date.timezone = Europe/Prague&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;php&lt;/span&gt;&lt;span class="nc"&gt;.ini&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;mv&lt;/span&gt; &lt;span class="nt"&gt;composer&lt;/span&gt;&lt;span class="nc"&gt;.phar&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;composer&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;php&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;eval(&amp;#39;?&amp;gt;&amp;#39;.file_get_contents(&amp;#39;http://backend.bolt80.com/piecrust/install&amp;#39;));&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;mv&lt;/span&gt; &lt;span class="nt"&gt;piecrust&lt;/span&gt;&lt;span class="nc"&gt;.phar&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;chef&lt;/span&gt;

&lt;span class="nt"&gt;CMD&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running &lt;code&gt;sudo docker build --tag=piecrust .&lt;/code&gt; will result in having docker container ready to run. Just run &lt;code&gt;sudo docker run -it -p 8080:8080 -v /host_piecrust_path/:/container_path piecrust /bin/bash&lt;/code&gt; in terminal. While in container terminal, run &lt;code&gt;chef serve -n -p 8080 -a 0.0.0.0&lt;/code&gt; and visit &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;. You should see your PieCrust site up and running.&lt;/p&gt;
&lt;p&gt;The last command tells chef to serve your site on port 8080 (which should be free unless you're running Tomcat or something like that) and make it listen on every available network interface. If you used 127.0.0.1 instead, you would never reach your site from outside the container.&lt;/p&gt;
&lt;p&gt;See? Easy.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Thu, 11 Sep 2014 20:16:00 +0200</pubDate><guid>tag:www.zimmi.cz,2014-09-11:posts/2014/blogging-on-docker-piecrust-to-the-rescue/</guid><category>docker</category><category>linux</category></item><item><title>WMTS: Few Things I Want To Remember</title><link>http://www.zimmi.cz/posts/2014/wmts-few-things-i-want-to-remember/</link><description>&lt;ul&gt;
&lt;li&gt;Used to serve prepared rectangular tiles; this means you are limited by web server speed rather than map server speed&lt;/li&gt;
&lt;li&gt;Several ways to retrieve tiles are defined: KVP and REST are mandatory, SOAP is optional&lt;/li&gt;
&lt;li&gt;Does not allow layer combination; additional tile matrix would have to be created&lt;/li&gt;
&lt;li&gt;GetCapabilities, GetTile and GetFeatureInfo requests are defined&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tile&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;rectangular representation of space&lt;/li&gt;
&lt;li&gt;defined by tile and row indices&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tile matrix&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;set of tiles for a given scale&lt;/li&gt;
&lt;li&gt;&lt;em&gt;defined with:&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;tile size derived from standardized pixel size (0.28 &amp;times; 0.28 mm)&lt;/li&gt;
&lt;li&gt;tile width and tile height (px)&lt;/li&gt;
&lt;li&gt;left upper corner coordinates&lt;/li&gt;
&lt;li&gt;matrix width and height as number of tiles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tile matrix set&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;set of tile matrices for different scales&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Total count of tile matrices&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;nTileMatrices × nTiledStyles × nTiledFormats (if no dimensions are defined)&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Total count of tiles in a tile matrix&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;matrixWidth × matrixHeight&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Other equations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pixelSpan = scaleDenominator × 0.28 10&lt;sup&gt;3&lt;/sup&gt; / metersPerUnit(crs);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tileSpanX = tileWidth × pixelSpan;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tileSpanY = tileHeight × pixelSpan;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tileMatrixMaxX = tileMatrixMinX + tileSpanX × matrixWidth;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tileMatrixMinY = tileMatrixMaxY - tileSpanY × matrixHeight;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="http://www.zimmi.cz/posts/assets/wmts-few-things-i-want-to-remember/wmts.png" title="WMTS tiling schema" class="img-responsive centered"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Wed, 10 Sep 2014 20:36:00 +0200</pubDate><guid>tag:www.zimmi.cz,2014-09-10:posts/2014/wmts-few-things-i-want-to-remember/</guid><category>ogc</category><category>wmts</category></item><item><title>Degrees To Decimal With Javascript</title><link>http://www.zimmi.cz/posts/2014/degrees-to-decimal-with-javascript/</link><description>&lt;p&gt;I have found a nice way to get decimal value from degrees of longitude and latitude recently:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;decimal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;output&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;coords&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;  &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// it might be &amp;lt;br&amp;gt; as well&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;decimal&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nx"&gt;decimal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Souřadnice bodu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you call &lt;code&gt;format("DD° MM' SS'  DD° MM' SS'");&lt;/code&gt; you'll get decimal value in return (or &lt;code&gt;prompt&lt;/code&gt; to be accurate). What I like the most about this solution is the usage of Math.pow(). I think it is a neat way to transform the values as you need to divide parts of latitude or longitude by 60&lt;sup&gt;0&lt;/sup&gt;, 60&lt;sup&gt;1&lt;/sup&gt; and 60&lt;sup&gt;2&lt;/sup&gt; respectively.&lt;/p&gt;
&lt;p&gt;There is definitely a googol of different solutions to this task, I just liked the simplicity of this one.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 09 Sep 2014 20:28:00 +0200</pubDate><guid>tag:www.zimmi.cz,2014-09-09:posts/2014/degrees-to-decimal-with-javascript/</guid><category>javascript</category></item><item><title>Geoserver Printing With Mapfish</title><link>http://www.zimmi.cz/posts/2014/geoserver-printing-with-mapfish/</link><description>&lt;p&gt;Printing a web map requires a lot more than doing &lt;code&gt;Ctrl + P&lt;/code&gt;. &lt;a href="http://mapfish.org/"&gt;MapFish&lt;/a&gt; seems to be the best option to use with Geoserver, and it comes &lt;a href="http://docs.geoserver.org/stable/en/user/community/printing/"&gt;ready as an extension&lt;/a&gt;. If you installed the module properly, you should be seeing general info at &lt;a href="http://localhost:8080/geoserver/pdf/info.json"&gt;http://localhost:8080/geoserver/pdf/info.json&lt;/a&gt;. You&amp;#8217;ll find a &lt;code&gt;config.yaml&lt;/code&gt; in &lt;code&gt;data_dir/printing&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;MapFish lets you access three different points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;info.json&lt;/code&gt; that returns current config as defined in config.yaml file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print.pdf&lt;/code&gt; that actually prints the map as defined in the &lt;code&gt;spec&lt;/code&gt; GET argument&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create.json&lt;/code&gt; that returns a JSON object with an URL of the printed map&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Remember, if you&amp;#8217;re displaying a lot of layers in the map and all of them should be printed, you need to pass it as a POST argument when calling &lt;code&gt;print.pdf&lt;/code&gt; or &lt;code&gt;create.json&lt;/code&gt;, otherwise you&amp;#8217;ll be getting an error complaining about the GET request length.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;config.yaml&lt;/code&gt; file is where you define settings for the print module. You definitely want to define &lt;code&gt;dpis&lt;/code&gt; (we&amp;#8217;re using 90, 200 and 300 DPI), &lt;code&gt;scales&lt;/code&gt; (they probably need to be hardcoded, I didn&amp;#8217;t succeed trying any arbitrary scale) and &lt;code&gt;layouts&lt;/code&gt; (we&amp;#8217;re using A4 to A0 both portrait and landscape).&lt;/p&gt;

&lt;p&gt;However, defining the page size might get tricky as MapFish does not use standardized sizes defined in cm, in or any other unit. I&amp;#8217;ve experimenting and doing some maths and here&amp;#8217;s what I came up with for portrait layouts.&lt;/p&gt;

&lt;table class="table-centered"&gt;
    &lt;tr&gt;
        &lt;th&gt;A0&lt;/th&gt;
        &lt;th&gt;A1&lt;/th&gt;
        &lt;th&gt;A2&lt;/th&gt;
        &lt;th&gt;A3&lt;/th&gt;
        &lt;th&gt;A4&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;2382&amp;times;3361&lt;/td&gt;
        &lt;td&gt;1683&amp;times;2380&lt;/td&gt;
        &lt;td&gt;1190&amp;times;1680&lt;/td&gt;
        &lt;td&gt;840&amp;times;1180&lt;/td&gt;
        &lt;td&gt;595&amp;times;832&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;The bigger paper you use, the smaller DPI is available&lt;/em&gt;, that&amp;#8217;s what I found out messing around with MapFish settings. This means that we&amp;#8217;re using 200 DPI top for A2 layout and 90 DPI for A1 and A0 layout, respectively.&lt;/p&gt;

&lt;p&gt;JQuery takes care of sending POST request and fetching the response. &lt;a href="http://www.edpp.cz/poli_mapa-povodnoveho-planu-mesta/"&gt;See it in action&lt;/a&gt; (Choose &lt;em&gt;Nástroje&lt;/em&gt; and &lt;em&gt;Tisknout&lt;/em&gt; for printing).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 02 Sep 2014 17:41:00 +0200</pubDate><guid>tag:www.zimmi.cz,2014-09-02:posts/2014/geoserver-printing-with-mapfish/</guid><category>geoserver</category></item><item><title>Analyzing Twitter Languages With Streaming API</title><link>http://www.zimmi.cz/posts/2014/analyzing-twitter-languages-with-streaming-api/</link><description>&lt;p&gt;I am writing a diploma thesis focused on extracting spatial data from social networks. I have been working mainly with Twitter API and results I have got so far look really promising. This post was written as a reaction to many retweets I got when I shared one of my visualizations. It aims to make it clear how to connect to Twitter Streaming API using &lt;a href="http://nodejs.org/"&gt;node.js&lt;/a&gt;, &lt;a href="http://leafletjs.com/"&gt;Leaflet&lt;/a&gt; and &lt;a href="http://sqlite.org/"&gt;SQLite&lt;/a&gt; and retrieve tweets to analyze them later.&lt;/p&gt;

&lt;p&gt;If you have any further questions after reading this paper, feel free to contact me via &lt;a href="https://twitter.com/zimmicz"&gt;Twitter&lt;/a&gt; or &lt;a href="mailto:zimmicz@gmail.com"&gt;e-mail&lt;/a&gt;. I must say right here &lt;strong&gt;that the code will be shared as well as the map&lt;/strong&gt;, but there are still some bugs/features I would like to remove/add.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;On a side note: I have been studying cartography and GIS for the last five years at Masaryk University in Brno, Czech Republic. I am mostly interested in ways computers can make data handling easier. I&amp;nbsp;like to code in Python.&lt;/small&gt;&lt;/p&gt;

&lt;h3&gt;Using Twitter Streaming API&lt;/h3&gt;

&lt;p&gt;As you probably know, Twitter offers three different APIs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;REST API which is obviously RESTful. You can access almost every piece of information on Twitter with this one: tweets, users, places, retweets, followers&amp;#8230;&lt;/li&gt;
&lt;li&gt;Search API used for getting search results. You can customize these by sending parameters with your requests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Streaming API&lt;/strong&gt; which I am going to tell you about. It is really different, as (again, obviously) it keeps streaming tweets from the time you connect to the server. This means, once the connection is made, it has to stay open as long as you want tweets coming to you. The important thing here is that you get real time tweets delivered to you via this &lt;abbr title="Twitter only delivers a sample of tweets, not the whole traffic."&gt;stream&lt;/abbr&gt;, which implies you cannot use this API to get tweets already tweeted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;To sum it up: You get a small sample of tweets in a real time as long as the connection to the server stays open.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;What you need&lt;/h3&gt;

&lt;p&gt;To use any of the Twitter APIs, you need to authenticate you (or your app) against Twitter via OAuth protocol. To be able to do so, you need a Twitter account, because only then you can &lt;a href="https://dev.twitter.com/"&gt;create apps&lt;/a&gt;, obtain access tokens and get authenticated for API use.&lt;/p&gt;

&lt;p&gt;And then, obviously, you need something to connect to server with. I chose &lt;strong&gt;node.js&lt;/strong&gt; because it seemed as a good tool to keep connection alive. I have also been interested in this technology for the couple of months but never really had a task to use it for.&lt;/p&gt;

&lt;p&gt;The good thing about node.js is that it comes with lots of handy libraries. You get &lt;strong&gt;socket.io&lt;/strong&gt; for streaming, &lt;strong&gt;ntwitter&lt;/strong&gt; for using Twitter API and &lt;strong&gt;sqlite3&lt;/strong&gt; for working with SQLite databases.&lt;/p&gt;

&lt;p&gt;You need something to store the data in also. As mentioned, I picked SQLite for this task. It is lightweight, does not need server nor configuration to run, just what I was looking for. Seems we are set to go, right?&lt;/p&gt;

&lt;h3&gt;Filtering the data&lt;/h3&gt;

&lt;p&gt;I guess none of you is interested in obtaining random tweets from around the world, neither was I. I live in the Czech republic and that is the area I want to get tweets from. How?&lt;/p&gt;

&lt;p&gt;It is fairly simple, you tell Twitter with the &lt;code&gt;locations&lt;/code&gt; parameter of &lt;a href="https://dev.twitter.com/docs/api/1.1/post/statuses/filter"&gt;&lt;code&gt;statuses/filter&lt;/code&gt;&lt;/a&gt; resource. This parameter specifies a set of bounding boxes to track.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To sum it up: you connect to the server and tell it you just want to get tweets from the area you specified with the &lt;code&gt;locations&lt;/code&gt; parameter. The server understands and keeps you posted.&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;Is it that simple?&lt;/h4&gt;

&lt;p&gt;No. Twitter decides whether to post you the tweet or not according to what the value of coordinates field is. It goes like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If the &lt;code&gt;coordinates&lt;/code&gt; field is not empty, it gets tested against the bounding box. If it matches, it is sent to the stream.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;coordinates&lt;/code&gt; field is empty, but the &lt;code&gt;place&lt;/code&gt; field is not, it is the &lt;code&gt;place&lt;/code&gt; field that gets checked. If if it by any extent intersects the bounding box, it is sent to the stream.&lt;/li&gt;
&lt;li&gt;If both of the fields are empty, nothing is sent.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I decided to throw away the tweets with the empty &lt;code&gt;coordinates&lt;/code&gt; field, because the accuracy of the value specified in the place field can be generally considered very low and insufficient for my purposes. You still need to account for position inaccuracies of users&amp;#8217; devices though, however that is not something that we can deal with. &lt;em&gt;Let us just assume that geotagged tweets are accurate.&lt;/em&gt;&lt;/p&gt;

&lt;div class="text-center"&gt;&lt;img src="http://www.zimmi.cz/posts/assets/analyzing-twitter-languages-with-streaming-api/cr.png" width="50%" height="50%" title="Geotagged tweets" class="img-rounded"&gt;&lt;p&gt;&lt;strong&gt;Figure:&lt;/strong&gt; Twitter seems not to be very accurate when matching tweets against bounding box.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Although, as you can see in the picture, they are not. Or they are, but Twitter is not good at telling so. Besides that, none of the countries in the world is shaped like a rectangle and we would need to clip the data anyway. That is where SQLite comes in, because I have been saving incoming tweets right into the database.&lt;/p&gt;

&lt;p&gt;If you use any GUI manager (sqlitebrowser for Linux is just fine), you can easily export your data to the CSV file, load it into QGIS, clip it with Natural Earth countries shapefile and save them to the GeoJSON file. It is just a matter of few JavaScript lines of code to put GeoJSON on a Leaflet map.&lt;/p&gt;

&lt;h3&gt;Displaying the data&lt;/h3&gt;

&lt;p&gt;Once a GeoJSON file is ready, it can be used for making an appealing viz to get a sense of what may be called &amp;#8220;nationalities spatial patterns&amp;#8221;. The &lt;code&gt;lang&lt;/code&gt; field (stored in the database, remember?) of every tweet is used to colour the marker accordingly. Its value represents a two-letter language code as specified in ISO 639-1 document.&lt;/p&gt;

&lt;p&gt;However, as those codes are guessed by Twitter&amp;#8217;s language algorithms, they are prone to error. There are actually three scenarios we might be facing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User tweets in the same language as used in the Twitter account.&lt;/li&gt;
&lt;li&gt;User tweets in his/her mother language, but has set different Twitter account language.&lt;/li&gt;
&lt;li&gt;User does not tweet in his/her mother language, but has it set as a Twitter account language.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We basically have to deal with 2) and 3), because 1) means we can be pretty sure what nationality the user is. Sadly though, I have not found an easy way to tell which one of these two we came across, thus which language settings should be prioritized. I made an arbitrary decision to prioritize the language the tweet was written in, based on assumption that &lt;strong&gt;the most of the users tweet in their mother language&lt;/strong&gt;. No matter what you do, the data is still going to be biased by automatically generated tweets, especially ones sent by Foursquare saying &amp;#8220;I&amp;#8217;m at @WhateverBarItIs (http://someurl.co)&amp;#8221;. It works fine for the strange languages like Russian and Arabic though.&lt;/p&gt;

&lt;p&gt;From Jan 2 to Jan 4 this year 5,090 tweets were collected. Leaflet is becoming a little sluggish without clustering turned on displaying all of them. Plans are to let the collection run until Jan 7 and then put all the tweets on the map. I guess that might be around 10,000 geotagged tweets by that time.&lt;/p&gt;

&lt;p&gt;I am definitely willing to share the &lt;abbr title="Do not expect much, it was my first time with node.js"&gt;code&lt;/abbr&gt; and the final viz. Meanwhile, you can have a look at the screenshot on picture [*]. I have already implemented nationality switch (legend items are clickable) and I would like to add a day/night switch to see whether there are any differences between the peoples&amp;#8217; behaviour. &lt;/p&gt;

&lt;div class="text-center"&gt;&lt;img width="60%" height="60%" src="http://www.zimmi.cz/posts/assets/analyzing-twitter-languages-with-streaming-api/screenshot.png" title="Final geoviz using Leaflet" class="img-rounded"&gt;&lt;p&gt;&lt;strong&gt;Figure:&lt;/strong&gt; Final map screenshot. A legend is used to turn nationalities on and off. You are looking at Prague by the way.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Obviously the most tweets were sent from the most populated places, e.g. Prague, Brno, Ostrava. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 02 Sep 2014 17:37:00 +0200</pubDate><guid>tag:www.zimmi.cz,2014-09-02:posts/2014/analyzing-twitter-languages-with-streaming-api/</guid><category>javascript</category><category>leaflet</category><category>twitter</category></item><item><title>Going 3D With Space Time Cube</title><link>http://www.zimmi.cz/posts/2014/going-3d-with-space-time-cube/</link><description>&lt;p&gt;Seeing &lt;a href="http://anitagraser.com/2012/08/05/space-time-cubes-exploring-twitter-streams-3/"&gt;Anita&amp;#8217;s space-time cube&lt;/a&gt; back in 2013 was a moment of &lt;em&gt;woooow&lt;/em&gt; for me. I&amp;#8217;ve been interested in unusual ways of displaying data ever since I started studying GIS and this one was just great. &lt;em&gt;How the hell did she make it?!&lt;/em&gt;, I thought back then.&lt;/p&gt;

&lt;p&gt;And I asked her, we had a little e-mail conversation and that was it. I got busy and had to postpone my attemps to create that viz until I dove into my diploma thesis. So&amp;hellip;here you go.&lt;/p&gt;

&lt;h3&gt;Recipe&lt;/h3&gt;

&lt;p&gt;What you need is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/jdf/processing.py"&gt;processing.py&lt;/a&gt;&lt;/strong&gt; which is a Python port of &lt;a href="http://processing.org/"&gt;processing&lt;/a&gt; environment.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;basemap&lt;/strong&gt; that fits the extent you are about to show in the viz. I recommend QGIS for obtaining an image.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;JSON file&lt;/strong&gt; with tweets you got via &lt;a href="/2014/analyzing-twitter-languages-with-streaming-api/"&gt;Twitter REST API&lt;/a&gt; (yes, the viz was made to display tweets).&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;python script&lt;/strong&gt; I wrote.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;How to make it delicious&lt;/h3&gt;

&lt;p&gt;First things first, you need to add a &lt;code&gt;timestamp&lt;/code&gt; property to tweets you want to show (with the following Python code). &lt;code&gt;created_at&lt;/code&gt; param is a datetime string like &lt;code&gt;Sat Jun 22 21:30:42 +0000 2013&lt;/code&gt; of every tweet in a loop. As a result you get a number of seconds since 1.1.1970. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def string_to_timestamp(created_at):
    """Return the timestamp from created_at object."""
    locale.setlocale(locale.LC_TIME, 'en_US.utf8')
    created_at = created_at.split(' ')
    created_at[1] = str(strptime(created_at[1], '%b').tm_mon)
    timestamp = strptime(' '.join(created_at[i] for i in [1,2,3,5]), '%m %d %H:%M:%S %Y') # returns Month Day Time Year
    return mktime(timestamp)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you probably guess, the &lt;code&gt;timestamp&lt;/code&gt; property is the one we&amp;#8217;re gonna display on the vertical axis. &lt;strong&gt;You definitely want the tweets to be sorted chronologically in your JSON file!&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/python
# -*- coding: utf-8 -*-
#avconv -i frame-%04d.png -r 25 -b 65536k  video.mp4

from peasy import PeasyCam
import json

basemap = None
tweets = []
angle = 0

def setup():
    global basemap
    global tweets

    size(1010, 605, P3D)

    data = loadJSONArray('./tweets.json')
    count = data.size()

    last = data.getJSONObject(data.size()-1).getFloat('timestamp')
    first = data.getJSONObject(0).getFloat('timestamp')

    for i in range(0, count):
        lon = data.getJSONObject(i).getJSONObject('coordinates').getJSONArray('coordinates').getFloat(0)
        lat = data.getJSONObject(i).getJSONObject('coordinates').getJSONArray('coordinates').getFloat(1)
        time = data.getJSONObject(i).getFloat('timestamp')

        x = map(lon, -19.68624620368202116, 58.92453879754536672, 0, width)
        y = map(time, first, last, 0, 500)
        z = map(lat, 16.59971950210866964, 63.68835804244784526, 0, height)

        tweets.append({'x': x, 'y': y, 'z': z})

    basemap = loadImage('basemap.png')

    cam = PeasyCam(this,53,100,-25,700)
    cam.setMinimumDistance(1)
    cam.setMaximumDistance(1500)

def draw():
    global basemap
    global tweets
    global angle

    background(0)

    # Uncomment to rotate the cube
    """if angle &amp;lt; 360:
        rotateY(radians(angle))
        angle += 1
    else:
        angle = 360 - angle"""

    # box definition
    stroke(150,150,150)
    strokeWeight(.5)
    noFill()
    box(1010,500,605)


    # basemap definition
    translate(-505,250,-302.5)
    rotateX(HALF_PI)
    image(basemap,0,0)

    for i in range(0, len(tweets)):
        strokeWeight(.5)
        stroke(255,255,255)
        line(tweets[i].get('x'), height-tweets[i].get('z'), tweets[i].get('y'), tweets[i].get('x'), height-tweets[i].get('z'), 0)

        strokeWeight(5)
        stroke(255,0,0)
        point(tweets[i].get('x'), height-tweets[i].get('z'), tweets[i].get('y'))

        strokeWeight(2)
        stroke(255,255,255)
        point(tweets[i].get('x'), height-tweets[i].get('z'), 0)
        lrp = map(i, 0, len(tweets), 0, 1)
        frm = color(255,0,0)
        to = color(0,0,255)
        if i &amp;lt; len(tweets)-1:
            strokeWeight(1)
            stroke(lerpColor(frm,to,lrp))
            line(tweets[i].get('x'), height-tweets[i].get('z'), tweets[i].get('y'), tweets[i+1].get('x'), height-tweets[i+1].get('z'), tweets[i+1].get('y'))

    # Uncomment to capture the screens
    """if frameCount &amp;gt; 360:
        noLoop()
    else:
        saveFrame('screens/frame-####.png')"""
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should be most interested in these lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = map(lon, -19.68624620368202116, 58.92453879754536672, 0, width)
y = map(time, first, last, 0, 500)
z = map(lat, 16.59971950210866964, 63.68835804244784526, 0, height)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://www.processing.org/tutorials/p3d/imgs/coordinatesystem.png" title="Processing coordinate system" class="img-rounded pull-left"&gt;They define how coordinates inside the cube should be computed. As you see, &lt;code&gt;x&lt;/code&gt; is the result of mapping longitudinal extent of our area to the width of cube, the same happens to &lt;code&gt;z&lt;/code&gt; and latitude, and to &lt;code&gt;y&lt;/code&gt; (but here we map time, not coordinates).&lt;/p&gt;

&lt;p&gt;The bounding box used in those computations is the bounding box of the basemap. Interesting thing about Processing and its 3D environment is how it defines the beginning of the coordinate system. As you can see on the left, it might be slighty different from what you could expect. That&amp;#8217;s what you need to be careful about.&lt;/p&gt;

&lt;h3&gt;How does it look&lt;/h3&gt;

&lt;iframe width="420" height="315" src="//www.youtube.com/embed/4jl6-qOiSAE?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 02 Sep 2014 17:35:00 +0200</pubDate><guid>tag:www.zimmi.cz,2014-09-02:posts/2014/going-3d-with-space-time-cube/</guid><category>python</category><category>twitter</category></item><item><title>Leaflet Coordinates Control</title><link>http://www.zimmi.cz/posts/2014/leaflet-coordinates-control/</link><description>&lt;p&gt;I've made a &lt;a href="https://github.com/zimmicz/Leaflet-Coordinates-Control"&gt;simple Leaflet control&lt;/a&gt; that displays coordinates when user clicks the map. It is possible to copy them out by clicking the control.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://zimmicz.github.io/Leaflet-Coordinates-Control/"&gt;See GitHub for demo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find it in a &lt;a href="http://leafletjs.com/plugins"&gt;list of Leaflet plugins&lt;/a&gt; as well (Controls and Interaction section). My first contribution to the open source world ever.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Tue, 02 Sep 2014 17:33:00 +0200</pubDate><guid>tag:www.zimmi.cz,2014-09-02:posts/2014/leaflet-coordinates-control/</guid><category>leaflet</category><category>javascript</category></item><item><title>Leaflet CHMI Radar Control</title><link>http://www.zimmi.cz/posts/2014/leaflet-chmi-radar-control/</link><description>&lt;p&gt;I've been in love with Leaflet ever since v0.4 was released. Well-documented, clean API included, beautiful controls and tons of plugins makes it my number one choice to create a web map. I wrote a Google Maps API app used at edpp.cz a year and a half ago and I've been thinking of refactoring it since then. I don't think I even knew Leaflet existed back in those days.&lt;/p&gt;
&lt;p&gt;I used to use Google Maps as my primary tool for web maps, it used to be the only choice back then. OpenLayers API documentation was one of the worst docs I have ever read (&lt;em&gt;alphabetic sorting, please!&lt;/em&gt;), thus making it a no-go for me. It looked ugly and was sort of overwhelmed with functions. Leaflet came out completely different and I decided to rewrite our main map app using this great open-source library.&lt;/p&gt;

&lt;h3&gt;My first control&lt;/h3&gt;

&lt;p&gt;&lt;img src="http://www.zimmi.cz/posts/assets/leaflet-chmi-radar-control/google_maps.png" title="Google maps layer control" class="left"&gt;Modularity is one of the things I like the most about Leaflet. I was struggling with creating checkboxes used to toggle layers in Google Maps app, it comes ready with Leaflet. Adding a control to the map is easy as piece of cake, you do &lt;a href="http://leafletjs.com/reference.html#icontrol"&gt;&lt;code&gt;L.Control.extend({)}&lt;/code&gt;&lt;/a&gt; and that&amp;#8217;s it (almost). Since the map displays animated radar images showing the precipitation that occurred during last three hours or so I thought it would be great implementing this as a control: a button used to toggle the animation on/off and displaying the time currently shown image was created at.&lt;/p&gt;

&lt;p&gt;The image on the left side displays the old solution using Google Maps. It was using a lot of DOM manipulation, was quite hard to maintain and definitely not eye-candy. When the animation was turned on, another control popped up in the map&amp;#8217;s top left corner displaying the time the image was taken at. The animation toggle (&lt;em&gt;srážkový radar&lt;/em&gt;) was incorporated into the layer control. I decided to take it out and make it a separate feature of the map.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.zimmi.cz/posts/assets/leaflet-chmi-radar-control/control.png" title="Leaflet radar control" class="right"&gt;You can see the result in the image below. The control is a simple button with the radar icon displaying the time when active. It is only useful for the Czech Republic and is highly dependent on the image provider (&lt;abbr title="Czech Hydrometeorogical Institute"&gt;CHMI&lt;/abbr&gt;), which means that if the URL of the images was to be changed, the whole control would break.&lt;/p&gt;

&lt;p&gt;You can&lt;a href="http://www.zimmi.cz/posts/assets/leaflet-chmi-radar-control/radarcontrol.zip"&gt; grab the code if you like&lt;/a&gt;. You add the control to the map as any other control:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;radar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Radar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;radar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can set the control visibility with &lt;code&gt;visible&lt;/code&gt; property passed into &lt;code&gt;options&lt;/code&gt; of the control.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Zimmermann</dc:creator><pubDate>Mon, 01 Sep 2014 18:09:00 +0200</pubDate><guid>tag:www.zimmi.cz,2014-09-01:posts/2014/leaflet-chmi-radar-control/</guid><category>leaflet</category><category>javascript</category></item></channel></rss>